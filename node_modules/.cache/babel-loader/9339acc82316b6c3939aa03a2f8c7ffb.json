{"ast":null,"code":"import _objectSpread from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/InputList/InputList.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/Button/Button';\nimport Input from '../../../components/Input/Input';\nimport styles from './InputList.module.css';\n\nvar InputList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(InputList, _Component);\n\n  function InputList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, InputList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(InputList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: '+ Add Another List'\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    _this.orderHander = function (event) {\n      event.preventDefault();\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      var order = {\n        ingredients: _this.props.ings,\n        price: _this.props.price,\n        orderData: formData\n      };\n\n      _this.props.onOrderBurger(order);\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var _inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[_inputIdentifier].valid && formIsValid;\n      }\n\n      _this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(InputList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.orderHander,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, formElementArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"ORDER\"));\n      return React.createElement(\"div\", {\n        className: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Enter Your Contact Data\"), form);\n    }\n  }]);\n\n  return InputList;\n}(Component);\n\nexport default InputList;","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/InputList/InputList.js"],"names":["React","Component","Button","Input","styles","InputList","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","formIsValid","loading","orderHander","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","setState","formElementArray","key","push","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport Button from '../../../components/Button/Button';\nimport Input from '../../../components/Input/Input';\n\nimport styles from './InputList.module.css';\n\nclass InputList extends Component{\n    state={\n        orderForm:{\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: '+ Add Another List'\n                },\n                value: \"\",\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        formIsValid: false,\n        loading: false\n    }\n    \n    orderHander = (event) => {\n        event.preventDefault();\n        const formData= {};\n        for (let formElementIdentifier in this.state.orderForm){\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order ={\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData\n        }\n\n        this.props.onOrderBurger(order);\n    }\n\n    // checkValidity(value, rules={}){\n    //     let isValid = true\n    //     if(rules.required){\n    //         isValid = value.trim() !== '' && isValid;\n    //     }\n\n    //     if(rules.minLength){\n    //         isValid = value.length >=rules.minLength && isValid;\n    //     }\n    //     if(rules.maxLength){\n    //         isValid = value.length <=rules.maxLength && isValid;\n    //     }\n\n    //     return isValid;\n    // }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm ={\n            ...this.state.orderForm\n        };\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] =updatedFormElement;\n\n        let formIsValid = true;\n        for(let inputIdentifier in updatedOrderForm){\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    render (){\n        const formElementArray=[];\n        for (let key in this.state.orderForm){\n            formElementArray.push({\n                id:key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n                <form onSubmit={this.orderHander}>\n                    {formElementArray.map(formElement=>(\n                        <Input \n                            key={formElement.id}\n                            elementType={formElement.config.elementType} \n                            elementConfig={formElement.config.elementConfig}\n                            value={formElement.config.value}\n                            invalid={!formElement.config.valid}\n                            shouldValidate={formElement.config.validation}\n                            touched ={formElement.config.touched}\n                            changed={ (event)=> this.inputChangedHandler(event, formElement.id)}/>\n                    ))}\n                    <Button btnType='Success' disabled={!this.state.formIsValid}>ORDER</Button>\n                </form>\n            );\n        return(\n            <div className>\n                <h4>Enter Your Contact Data</h4>   \n                {form}\n            </div>\n        );\n    }\n}\n\nexport default InputList;"]},"metadata":{},"sourceType":"module"}