{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js\";\nimport React, { Component } from 'react';\nimport styles from './Card.module.css';\nimport flow from 'lodash/flow';\nimport { DragSource, DropTarget } from 'react-dnd';\nvar Types = {\n  ITEM: 'card'\n};\nvar itemSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      id: props.id,\n      originalIndex: props.findCard(props.id).index\n    };\n  },\n  endDrag: function endDrag(props, monitor) {\n    var _monitor$getItem = monitor.getItem(),\n        droppedId = _monitor$getItem.id,\n        originalIndex = _monitor$getItem.originalIndex;\n\n    var didDrop = monitor.didDrop();\n\n    if (!didDrop) {\n      props.moveCard(droppedId, originalIndex);\n    }\n  }\n};\nvar box = {\n  drop: function drop(props, monitor, component) {\n    if (!component) {\n      return;\n    }\n\n    var droppedList = props.droppedList;\n    return {\n      droppedList: droppedList\n    };\n  },\n  canDrop: function canDrop() {\n    return false;\n  },\n  hover: function hover(props, monitor) {\n    var _monitor$getItem2 = monitor.getItem(),\n        draggedId = _monitor$getItem2.id;\n\n    var overId = props.id;\n\n    if (draggedId !== overId) {\n      var _props$findCard = props.findCard(overId),\n          overIndex = _props$findCard.index;\n\n      props.moveCard(draggedId, overIndex);\n    }\n  }\n};\n\nvar collectDrag = function collectDrag(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n};\n\nvar collectDrop = function collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOverCurrent: monitor.isOver({\n      shallow: true\n    })\n  };\n};\n\nvar Card =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Card, _Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isDragging = _this$props.isDragging,\n          connectDragSource = _this$props.connectDragSource,\n          connectDropTarget = _this$props.connectDropTarget,\n          isOverCurrent = _this$props.isOverCurrent;\n      var className = styles.Card;\n\n      if (isDragging) {\n        className = styles.CardDragging;\n      }\n\n      if (isOverCurrent) {\n        className = styles.CardDrop;\n      }\n\n      return connectDragSource(connectDropTarget(React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, this.props.cardName)));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\nexport default flow(DragSource(Types.ITEM, itemSource, collectDrag), DropTarget(Types.ITEM, box, collectDrop))(Card);","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js"],"names":["React","Component","styles","flow","DragSource","DropTarget","Types","ITEM","itemSource","beginDrag","props","id","originalIndex","findCard","index","endDrag","monitor","getItem","droppedId","didDrop","moveCard","box","drop","component","droppedList","canDrop","hover","draggedId","overId","overIndex","collectDrag","connect","connectDragSource","dragSource","isDragging","collectDrop","connectDropTarget","dropTarget","isOverCurrent","isOver","shallow","Card","className","CardDragging","CardDrop","cardName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styles from './Card.module.css';\nimport flow from 'lodash/flow';\n\nimport { DragSource, DropTarget } from 'react-dnd'\n\nconst Types = {\n    ITEM: 'card'\n}\n\n\nconst itemSource = {\n    beginDrag(props) {\n        return {\n            id: props.id,\n            originalIndex: props.findCard(props.id).index,\n        }\n    },\n    endDrag(props: CardProps, monitor: DragSourceMonitor) {\n        const { id: droppedId, originalIndex } = monitor.getItem()\n        const didDrop = monitor.didDrop()\n\n        if (!didDrop) {\n            props.moveCard(droppedId, originalIndex)\n        }\n    }\n}\n\nconst box = {\n    drop( props, monitor, component: React.Component | null) {\n        if (!component) {\n            return\n        }\n        \n        const droppedList = props.droppedList;\n        return ({\n            droppedList\n        });\n\n    },\n    canDrop() {\n        return false\n    },\n    hover(props: CardProps, monitor: DropTargetMonitor) {\n        const { id: draggedId } = monitor.getItem()\n        const { id: overId } = props\n\n        if (draggedId !== overId) {\n            const { index: overIndex } = props.findCard(overId)\n            props.moveCard(draggedId, overIndex)\n        }\n    }\n}\n\nconst collectDrag = (connect, monitor) =>{\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nconst collectDrop = (connect, monitor) => {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOverCurrent: monitor.isOver({ shallow: true })\n    }\n}\n\nclass Card extends Component {\n\n    render() {\n        const { isDragging, connectDragSource, connectDropTarget, isOverCurrent} = this.props\n        let className = styles.Card\n        if(isDragging){\n            className=styles.CardDragging\n        }\n        if(isOverCurrent){\n            className=styles.CardDrop\n        }\n        return connectDragSource(connectDropTarget(\n                <div className={className}>\n                    {this.props.cardName}\n                </div>\n        ))\n    }\n}\n\nexport default flow(\n    DragSource(Types.ITEM, itemSource, collectDrag),\n    DropTarget(Types.ITEM, box, collectDrop)\n)(Card)"]},"metadata":{},"sourceType":"module"}