{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js\";\nimport * as React from 'react';\nimport { DropTarget } from 'react-dnd';\nimport Card from '../../components/Card/Card';\nimport InputCard from '../InputCard/InputCard';\nimport styles from './List.module.css';\nimport { connect } from 'react-redux';\nimport * as listActions from '../../store/actions/lists';\nvar Types = {\n  ITEM: 'card'\n};\nvar cardTarget = {\n  drop: function drop() {}\n};\n\nvar collectDrop = function collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nvar Container =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Container, _React$Component);\n\n  function Container() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Container)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.moveCard = function (newListId, originalListId, id, atIndex) {\n      var _this$findCard = _this.findCard(id),\n          card = _this$findCard.card,\n          index = _this$findCard.index;\n\n      if (!originalListId) {\n        originalListId = _this.props.listId;\n      }\n\n      _this.props.onCardMovedInList(newListId, originalListId, index, atIndex);\n    };\n\n    _this.findCard = function (id) {\n      var cards = _this.props.cards;\n      var card = cards.filter(function (c) {\n        return \"\".concat(c.id) === id;\n      })[0];\n      return {\n        card: card,\n        index: cards.indexOf(card)\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var connectDropTarget = this.props.connectDropTarget;\n      var cards = this.props.cards;\n      var displayCards = null;\n\n      if (cards) {\n        displayCards = cards.map(function (card) {\n          return React.createElement(Card, {\n            key: card.id,\n            id: \"\".concat(card.id),\n            text: card.text,\n            listId: _this2.props.listId,\n            moveCard: _this2.moveCard,\n            findCard: _this2.findCard,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          });\n        });\n      }\n\n      return connectDropTarget(React.createElement(\"div\", {\n        className: styles.List,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, this.props.listName), displayCards, React.createElement(InputCard, {\n        createNewCard: this.props.onCardAdded,\n        cards: this.props.cards,\n        listId: this.props.listId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Container;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onCardAdded: function onCardAdded(cardName, cards, listId) {\n      return dispatch(listActions.addCard(cardName, cards, listId));\n    },\n    onCardMovedInList: function onCardMovedInList(newListId, originalListId, currentIndex, newIndex) {\n      return dispatch(listActions.moveCardInList(newListId, originalListId, currentIndex, newIndex));\n    }\n  };\n};\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(connect(null, mapDispatchToProps)(Container));","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js"],"names":["React","DropTarget","Card","InputCard","styles","connect","listActions","Types","ITEM","cardTarget","drop","collectDrop","monitor","connectDropTarget","dropTarget","Container","moveCard","newListId","originalListId","id","atIndex","findCard","card","index","props","listId","onCardMovedInList","cards","filter","c","indexOf","displayCards","map","text","List","listName","onCardAdded","Component","mapDispatchToProps","dispatch","cardName","addCard","currentIndex","newIndex","moveCardInList"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { DropTarget } from 'react-dnd'\nimport Card from '../../components/Card/Card'\nimport InputCard from '../InputCard/InputCard';\nimport styles from './List.module.css';\n\nimport { connect } from 'react-redux';\nimport * as listActions from '../../store/actions/lists';\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst cardTarget = {\n    drop() {}\n}\n\nconst collectDrop = (connect, monitor) =>{\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nclass Container extends React.Component{\n    render() {\n        const { connectDropTarget } = this.props\n        const { cards } = this.props\n        let displayCards = null\n        if(cards){\n            displayCards = cards.map(card => {\n                return <Card\n                    key={card.id}\n                    id={`${card.id}`}\n                    text={card.text}\n                    listId={this.props.listId}\n                    moveCard={this.moveCard}\n                    findCard={this.findCard}\n                />;\n            })\n        }\n\n        return connectDropTarget(\n            <div className={styles.List}>\n                <h4>{this.props.listName}</h4>\n                {displayCards}\n                <InputCard createNewCard={this.props.onCardAdded} \n                    cards={this.props.cards} \n                    listId={this.props.listId}/>\n            </div>\n        )\n    }\n\n    moveCard = (newListId, originalListId, id, atIndex) => {\n        const { card, index } = this.findCard(id)\n        if(!originalListId){\n            originalListId = this.props.listId\n        }\n        this.props.onCardMovedInList(newListId, originalListId, index, atIndex);\n    }\n\n    findCard = (id) => {\n        const { cards } = this.props\n        const card = cards.filter(c => `${c.id}` === id)[0]\n\n        return {\n            card,\n            index: cards.indexOf(card),\n        }\n    }\n}\n\nconst mapDispatchToProps= dispatch => {\n    return {\n        onCardAdded: (cardName, cards, listId) => dispatch(listActions.addCard(cardName, cards, listId)),\n        onCardMovedInList: (newListId, originalListId, currentIndex, newIndex) => dispatch(listActions.moveCardInList(newListId, originalListId, currentIndex, newIndex))\n\n    }\n}\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(connect(null, mapDispatchToProps)(Container))"]},"metadata":{},"sourceType":"module"}