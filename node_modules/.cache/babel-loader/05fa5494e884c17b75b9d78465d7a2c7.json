{"ast":null,"code":"var _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js\";\nimport React from 'react';\nimport { DragSource } from 'react-dnd';\nimport styles from './Card.module.css'; // Drag sources and drop targets only interact\n// if they have the same string type.\n// You want to keep types in a separate file with\n// the rest of your app's constants.\n\nvar Types = {\n  CARD: 'card'\n};\n/**\n * Specifies which props to inject into your component.\n */\n\nvar collect = function collect(connect, monitor) {\n  return {\n    // Call this function inside render()\n    // to let React DnD handle the drag events:\n    connectDragSource: connect.dragSource(),\n    // You can ask the monitor about the current drag state:\n    isDragging: monitor.isDragging()\n  };\n};\n\nvar Card = function Card(props) {\n  // Your component receives its own props as usual\n  var id = props.id; // These two props are injected by React DnD,\n  // as defined by your `collect` function above:\n\n  var isDragging = props.isDragging,\n      connectDragSource = props.connectDragSource;\n  return connectDragSource(React.createElement(\"div\", {\n    className: styles.Card,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, props.cardName, \"I am a draggable card \", id, isDragging && ' (and I am being dragged now)'));\n}; // Export the wrapped version\n\n\nexport default DragSource(Types.CARD, collect)(Card); // const card = (props) => (\n//     <div className={styles.Card}>{props.cardName}</div>\n// );\n// export default card;","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js"],"names":["React","DragSource","styles","Types","CARD","collect","connect","monitor","connectDragSource","dragSource","isDragging","Card","props","id","cardName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,WAA3B;AAEA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;AACA;AACA;AACA;;AACA,IAAMC,KAAK,GAAG;AACZC,EAAAA,IAAI,EAAE;AADM,CAAd;AAIA;;;;AAGA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,OAAD,EAAUC,OAAV,EAAsB;AACpC,SAAO;AACL;AACA;AACAC,IAAAA,iBAAiB,EAAEF,OAAO,CAACG,UAAR,EAHd;AAIL;AACAC,IAAAA,UAAU,EAAEH,OAAO,CAACG,UAAR;AALP,GAAP;AAOD,CARD;;AAUA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AACtB;AADsB,MAEdC,EAFc,GAEPD,KAFO,CAEdC,EAFc,EAItB;AACA;;AALsB,MAMdH,UANc,GAMoBE,KANpB,CAMdF,UANc;AAAA,MAMFF,iBANE,GAMoBI,KANpB,CAMFJ,iBANE;AAQtB,SAAOA,iBAAiB,CACtB;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACS,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,KAAK,CAACE,QADT,4BAEyBD,EAFzB,EAGGH,UAAU,IAAI,+BAHjB,CADsB,CAAxB;AAOD,CAfD,C,CAiBA;;;AACA,eAAeT,UAAU,CAACE,KAAK,CAACC,IAAP,EAAaC,OAAb,CAAV,CAAgCM,IAAhC,CAAf,C,CAGA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\nimport { DragSource } from 'react-dnd';\n\nimport styles from './Card.module.css';\n\n// Drag sources and drop targets only interact\n// if they have the same string type.\n// You want to keep types in a separate file with\n// the rest of your app's constants.\nconst Types = {\n  CARD: 'card'\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nconst collect = (connect, monitor) => {\n  return {\n    // Call this function inside render()\n    // to let React DnD handle the drag events:\n    connectDragSource: connect.dragSource(),\n    // You can ask the monitor about the current drag state:\n    isDragging: monitor.isDragging()\n  };\n}\n\nconst Card = (props) => {\n  // Your component receives its own props as usual\n  const { id } = props;\n\n  // These two props are injected by React DnD,\n  // as defined by your `collect` function above:\n  const { isDragging, connectDragSource } = props;\n\n  return connectDragSource(\n    <div className={styles.Card}>\n      {props.cardName}\n      I am a draggable card {id}\n      {isDragging && ' (and I am being dragged now)'}\n    </div>\n  );\n}\n\n// Export the wrapped version\nexport default DragSource(Types.CARD, collect)(Card);\n\n\n// const card = (props) => (\n//     <div className={styles.Card}>{props.cardName}</div>\n// );\n\n// export default card;"]},"metadata":{},"sourceType":"module"}