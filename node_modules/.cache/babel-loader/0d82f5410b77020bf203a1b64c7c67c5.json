{"ast":null,"code":"import _toConsumableArray from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from '../actions/actionTypes';\nvar initialState = {\n  lists: {\n    1: {\n      name: \"first List\",\n      cards: [{\n        id: \"L1C1\",\n        text: 'Write a cool JS library'\n      }, {\n        id: \"L1C2\",\n        text: 'Make it generic enough'\n      }, {\n        id: \"L1C3\",\n        text: 'Write README'\n      }, {\n        id: \"L1C4\",\n        text: 'Create some examples'\n      }, {\n        id: \"L1C5\",\n        text: 'Spam in Twitter and IRC to promote it'\n      }, {\n        id: \"L1C6\",\n        text: '???'\n      }, {\n        id: \"L1C7\",\n        text: 'PROFIT'\n      }]\n    },\n    2: {\n      name: \"second List\",\n      cards: [{\n        id: \"L2C1\",\n        text: 'Second List Card'\n      }]\n    }\n  }\n};\n\nvar reducer = function reducer() {\n  var _objectSpread4;\n\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.ADD_LIST:\n      var newList = {\n        name: action.listName,\n        cards: []\n      };\n      return _objectSpread({}, state, {\n        lists: _objectSpread({}, state.lists, _defineProperty({}, action.listLength, newList))\n      });\n\n    case actionTypes.REMOVE_LIST:\n      return _objectSpread({}, state, {\n        lists: [].concat(_toConsumableArray(state.lists.slice(0, state.lists.indexOf(action.listName))), _toConsumableArray(state.lists.slice(state.lists.indexOf(action.listName) + 1)))\n      });\n\n    case actionTypes.ADD_CARD:\n      var newCard = {\n        id: action.cardLength + 1,\n        text: action.cardName\n      };\n      return _objectSpread({}, state, {\n        lists: _objectSpread({}, state.lists, _defineProperty({}, action.listId, _objectSpread({}, state.lists[action.listId], {\n          cards: [].concat(_toConsumableArray(state.lists[action.listId].cards), [newCard])\n        })))\n      });\n\n    case actionTypes.MOVE_CARD:\n      var originalList = _objectSpread({}, state.lists[action.originalListId]);\n\n      var originalListCards = _toConsumableArray(originalList.cards);\n\n      var newListy = _objectSpread({}, state.lists[action.newListId]);\n\n      var newListCards = _toConsumableArray(newListy.cards);\n\n      if (action.originalListId === action.newListId) {\n        originalListCards.splice(action.currentIndex, 1);\n        originalListCards.splice(action.newIndex, 0, action.card);\n        newListCards = originalListCards;\n      } else {\n        console.log(\"IN HERE?\");\n        originalListCards.splice(action.currentIndex, 1);\n        newListCards.splice(action.newIndex, 0, action.card);\n      } // val.splice(to, 0, val.splice(from, 1)[0])\n\n\n      return _objectSpread({}, state, {\n        lists: _objectSpread({}, state.lists, (_objectSpread4 = {}, _defineProperty(_objectSpread4, action.originalListId, _objectSpread({}, state.lists[action.originalListId], {\n          cards: originalListCards\n        })), _defineProperty(_objectSpread4, action.newListId, _objectSpread({}, state.lists[action.newListId], {\n          cards: newListCards\n        })), _objectSpread4))\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/store/reducers/lists.js"],"names":["actionTypes","initialState","lists","name","cards","id","text","reducer","state","action","type","ADD_LIST","newList","listName","listLength","REMOVE_LIST","slice","indexOf","ADD_CARD","newCard","cardLength","cardName","listId","MOVE_CARD","originalList","originalListId","originalListCards","newListy","newListId","newListCards","splice","currentIndex","newIndex","card","console","log"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    lists: {\n        1:{\n            name: \"first List\",\n            cards: [\n                {\n                    id: \"L1C1\",\n                    text: 'Write a cool JS library',\n                },\n                {\n                    id: \"L1C2\",\n                    text: 'Make it generic enough',\n                },\n                {\n                    id: \"L1C3\",\n                    text: 'Write README',\n                },\n                {\n                    id: \"L1C4\",\n                    text: 'Create some examples',\n                },\n                {\n                    id: \"L1C5\",\n                    text: 'Spam in Twitter and IRC to promote it',\n                },\n                {\n                    id: \"L1C6\",\n                    text: '???',\n                },\n                {\n                    id: \"L1C7\",\n                    text: 'PROFIT',\n                }\n            ]\n        },\n        2:{\n            name: \"second List\",\n            cards: [\n                {\n                    id: \"L2C1\",\n                    text: 'Second List Card',\n                }\n            ]\n        }\n    }\n};\n\nconst reducer = (state=initialState, action) =>{\n    switch(action.type){\n        case actionTypes.ADD_LIST:\n            const newList = {name: action.listName, cards:[]};\n            return{\n                ...state,\n                lists: {\n                    ...state.lists,\n                    [action.listLength]: newList\n                }\n            };\n        case actionTypes.REMOVE_LIST:\n            return{\n                ...state,\n                lists:  [\n                    ...state.lists.slice(0, state.lists.indexOf(action.listName)),\n                    ...state.lists.slice(state.lists.indexOf(action.listName)+1)\n                ]\n            };\n        case actionTypes.ADD_CARD:\n            const newCard = {id: action.cardLength+1, text: action.cardName}\n            return{\n                ...state,\n                lists: {\n                    ...state.lists,\n                   [action.listId]: {\n                        ...state.lists[action.listId],\n                        cards:[\n                            ...state.lists[action.listId].cards,\n                            newCard\n                        ]\n                    }\n                }\n            };\n        case actionTypes.MOVE_CARD:\n            const originalList = {...state.lists[action.originalListId]}\n            const originalListCards = [...originalList.cards]\n            const newListy = {...state.lists[action.newListId]}\n            let newListCards = [...newListy.cards]\n            if(action.originalListId === action.newListId){\n                originalListCards.splice(action.currentIndex, 1)\n                originalListCards.splice(action.newIndex, 0, action.card)\n                newListCards = originalListCards\n            }\n            else{\n                console.log(\"IN HERE?\")\n                originalListCards.splice(action.currentIndex, 1)\n                newListCards.splice(action.newIndex, 0, action.card)\n            }\n            // val.splice(to, 0, val.splice(from, 1)[0])\n            return{\n                ...state,\n                lists: {\n                    ...state.lists,\n                    [action.originalListId]:{\n                        ...state.lists[action.originalListId],\n                        cards: originalListCards\n                    },\n                    [action.newListId]:{\n                        ...state.lists[action.newListId],\n                        cards: newListCards\n                    }\n                }\n            };\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}