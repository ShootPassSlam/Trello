{"ast":null,"code":"import _slicedToArray from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js\";\nimport * as React from 'react';\nimport { DropTarget } from 'react-dnd';\nimport Card from '../../components/Card/Card';\nimport InputCard from '../InputCard/InputCard';\nimport styles from './List.module.css';\nimport { connect } from 'react-redux';\nimport * as listActions from '../../store/actions/lists';\nvar Types = {\n  ITEM: 'card'\n};\nvar cardTarget = {\n  drop: function drop() {}\n};\n\nvar collectDrop = function collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nvar Container =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Container, _React$Component);\n\n  function Container() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Container)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.moveCard = function (originalListId, id, atIndex) {\n      var _this$findCard = _this.findCard(id, originalListId),\n          card = _this$findCard.card,\n          index = _this$findCard.index;\n\n      var newListId = _this.findList(id, originalListId);\n\n      console.log(\"WHAT WE ARE SENDING TO ON MOVE CARD:\");\n      console.log('ORIGINAL LIST:', originalListId);\n      console.log('NEW LIST:', newListId);\n      console.log(\"ORIGINAL INDEX:\", index);\n      console.log(\"NEW INDEX:\", atIndex);\n      console.log(\"CARD:\", card);\n\n      _this.props.onCardMovedInList(newListId, originalListId, index, atIndex, card);\n    };\n\n    _this.findCard = function (id, list) {\n      var cards = _this.props.lists[list].cards;\n      var card = cards.filter(function (c) {\n        return \"\".concat(c.id) === id;\n      })[0];\n\n      if (!card) {\n        card = cards[cards.length - 1];\n      }\n\n      return {\n        card: card,\n        index: cards.indexOf(card)\n      };\n    };\n\n    _this.findList = function (id, list) {\n      var cards = _this.props.lists[list].cards;\n      var card = cards.filter(function (c) {\n        return \"\".concat(c.id) === id;\n      })[0];\n\n      if (!card) {\n        card = cards[cards.length - 1];\n      }\n\n      var _arr = Object.entries(_this.props.lists);\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var _ref3 = _arr[_i];\n\n        var _ref2 = _slicedToArray(_ref3, 2);\n\n        var key = _ref2[0];\n        var value = _ref2[1];\n\n        for (var currentCard in value.cards) {\n          if (value.cards[currentCard] === card) {\n            return key;\n          }\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var connectDropTarget = this.props.connectDropTarget;\n      var cards = this.props.cards;\n      var displayCards = null;\n\n      if (cards) {\n        displayCards = cards.map(function (card) {\n          return React.createElement(Card, {\n            key: card.id,\n            id: \"\".concat(card.id),\n            text: card.text,\n            index: cards.indexOf(card),\n            listId: _this2.props.listId,\n            moveCard: _this2.moveCard,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          });\n        });\n      }\n\n      return connectDropTarget(React.createElement(\"div\", {\n        className: styles.List,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, this.props.listName), displayCards, React.createElement(InputCard, {\n        createNewCard: this.props.onCardAdded,\n        cards: this.props.cards,\n        listId: this.props.listId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Container;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onCardAdded: function onCardAdded(cardName, cards, listId) {\n      return dispatch(listActions.addCard(cardName, cards, listId));\n    },\n    onCardMovedInList: function onCardMovedInList(newListId, originalListId, currentIndex, newIndex, card) {\n      return dispatch(listActions.moveCardInList(newListId, originalListId, currentIndex, newIndex, card));\n    }\n  };\n};\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(connect(null, mapDispatchToProps)(Container));","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js"],"names":["React","DropTarget","Card","InputCard","styles","connect","listActions","Types","ITEM","cardTarget","drop","collectDrop","monitor","connectDropTarget","dropTarget","Container","moveCard","originalListId","id","atIndex","findCard","card","index","newListId","findList","console","log","props","onCardMovedInList","list","cards","lists","filter","c","length","indexOf","Object","entries","key","value","currentCard","displayCards","map","text","listId","List","listName","onCardAdded","Component","mapDispatchToProps","dispatch","cardName","addCard","currentIndex","newIndex","moveCardInList"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { DropTarget } from 'react-dnd'\nimport Card from '../../components/Card/Card'\nimport InputCard from '../InputCard/InputCard';\nimport styles from './List.module.css';\n\nimport { connect } from 'react-redux';\nimport * as listActions from '../../store/actions/lists';\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst cardTarget = {\n    drop() {}\n}\n\nconst collectDrop = (connect, monitor) =>{\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nclass Container extends React.Component{\n    render() {\n        const { connectDropTarget } = this.props\n        const { cards } = this.props\n        let displayCards = null\n        if(cards){\n            displayCards = cards.map(card => {\n                return <Card\n                    key={card.id}\n                    id={`${card.id}`}\n                    text={card.text}\n                    index={cards.indexOf(card)}\n                    listId={this.props.listId}\n                    moveCard={this.moveCard}\n                />;\n            })\n        }\n\n        return connectDropTarget(\n            <div className={styles.List}>\n                <h4>{this.props.listName}</h4>\n                {displayCards}\n                <InputCard createNewCard={this.props.onCardAdded} \n                    cards={this.props.cards} \n                    listId={this.props.listId}/>\n            </div>\n        )\n    }\n\n    moveCard = (originalListId, id, atIndex) => {\n        const { card, index } = this.findCard(id, originalListId)\n        const newListId = this.findList(id, originalListId)\n        console.log(\"WHAT WE ARE SENDING TO ON MOVE CARD:\")\n        console.log('ORIGINAL LIST:', originalListId)\n        console.log('NEW LIST:', newListId)\n        console.log(\"ORIGINAL INDEX:\", index)\n        console.log(\"NEW INDEX:\", atIndex)\n        console.log(\"CARD:\", card)\n        this.props.onCardMovedInList(newListId, originalListId, index, atIndex, card);\n    }\n\n    findCard = (id, list) => {\n        const { cards } = this.props.lists[list]\n        let card = cards.filter(c => `${c.id}` === id)[0]\n        if(!card){\n            card = cards[cards.length-1]\n        }\n        return {\n            card,\n            index: cards.indexOf(card),\n        }\n    }\n\n    findList = (id, list) => {\n        const { cards } = this.props.lists[list]\n        let card = cards.filter(c => `${c.id}` === id)[0]\n        if(!card){\n            card = cards[cards.length-1]\n        }\n\n        for (const [key, value] of Object.entries(this.props.lists)) {\n            for ( const currentCard in value.cards) {\n                if(value.cards[currentCard]===card){\n                    return key;\n                }\n            }\n        }\n    }\n}\n\nconst mapDispatchToProps= dispatch => {\n    return {\n        onCardAdded: (cardName, cards, listId) => dispatch(listActions.addCard(cardName, cards, listId)),\n        onCardMovedInList: (newListId, originalListId, currentIndex, newIndex, card) => dispatch(listActions.moveCardInList(newListId, originalListId, currentIndex, newIndex, card))\n\n    }\n}\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(connect(null, mapDispatchToProps)(Container))"]},"metadata":{},"sourceType":"module"}