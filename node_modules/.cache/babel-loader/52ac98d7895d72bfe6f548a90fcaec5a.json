{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js\";\nimport * as React from 'react';\nimport { DragSource, DropTarget, DragSourceMonitor, DropTargetMonitor } from 'react-dnd';\nimport styles from './Card.module.css';\nvar Types = {\n  ITEM: 'card'\n};\nvar cardSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      id: props.id,\n      originalIndex: props.findCard(props.id).index\n    };\n  },\n  endDrag: function endDrag(props, monitor) {\n    var _monitor$getItem = monitor.getItem(),\n        droppedId = _monitor$getItem.id,\n        originalIndex = _monitor$getItem.originalIndex;\n\n    var didDrop = monitor.didDrop();\n    var listId = props.listId;\n\n    if (!didDrop) {\n      props.moveCard(listId, droppedId, originalIndex);\n    }\n  }\n};\nvar cardTarget = {\n  canDrop: function canDrop() {\n    return false;\n  },\n  hover: function hover(props, monitor) {\n    var _monitor$getItem2 = monitor.getItem(),\n        draggedId = _monitor$getItem2.id;\n\n    var overId = props.id,\n        listId = props.listId;\n\n    if (draggedId !== overId) {\n      var _props$findCard = props.findCard(overId),\n          overIndex = _props$findCard.index;\n\n      props.moveCard(listId, draggedId, overIndex);\n    }\n  }\n};\n\nvar Card =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          text = _this$props.text,\n          isDragging = _this$props.isDragging,\n          connectDragSource = _this$props.connectDragSource,\n          connectDropTarget = _this$props.connectDropTarget;\n      var className = styles.Card;\n\n      if (isDragging) {\n        className = styles.CardDragging;\n      }\n\n      return connectDragSource(connectDropTarget(React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, text)));\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nexport default DropTarget(Types.ITEM, cardTarget, function (connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n})(DragSource(Types.ITEM, cardSource, function (connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n})(Card)); // import * as React from 'react'\n// import { DragSource, DropTarget } from 'react-dnd'\n// import styles from './Card.module.css';\n// const Types = {\n//     ITEM: 'card'\n// }\n// const cardSource = {\n//     beginDrag(props) {\n//         return {\n//             id: props.id,\n//             originalIndex: props.findCard(props.id).index,\n//         }\n//     },\n//     endDrag(props, monitor) {\n//         const { id: droppedId, originalIndex } = monitor.getItem()\n//         const didDrop = monitor.didDrop()\n//         const currentList = props.listId\n//         console.log(\"originalIndex\", originalIndex);\n//         if (!didDrop) {\n//             props.moveCard(currentList, droppedId, originalIndex)\n//         }\n//     },\n// }\n// const cardTarget = {\n//     canDrop() {\n//         return false\n//     },\n//     hover(props, monitor) {\n//         const { id: draggedId } = monitor.getItem()\n//         const { id: overId } = props\n//         const currentList = props.listId\n//         if (draggedId !== overId) {\n//             const { index: overIndex } = props.findCard(overId)\n//             props.moveCard(currentList, draggedId, overIndex)\n//         }\n//     },\n// }\n// const collectDrop = (connect) => {\n//     return {\n//         connectDropTarget: connect.dropTarget()\n//     }\n// }\n// const collectDrag = (connect, monitor) =>{\n//     return {\n//         connectDragSource: connect.dragSource(),\n//         isDragging: monitor.isDragging()\n//     }\n// }\n// class Card extends React.Component{\n//     render() {\n//         const { isDragging, connectDragSource, connectDropTarget} = this.props\n//         let className = styles.Card\n//         if(isDragging){\n//             className=styles.CardDragging\n//         }\n//         return connectDragSource(\n//             connectDropTarget(\n//                 <div className={className}>\n//                     {this.props.cardName}\n//                 </div>\n//             )\n//         )\n//     }\n// }\n// export default DropTarget(Types.ITEM, cardTarget, collectDrop)(DragSource(Types.ITEM, cardSource, collectDrag)(Card))","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js"],"names":["React","DragSource","DropTarget","DragSourceMonitor","DropTargetMonitor","styles","Types","ITEM","cardSource","beginDrag","props","id","originalIndex","findCard","index","endDrag","monitor","getItem","droppedId","didDrop","listId","moveCard","cardTarget","canDrop","hover","draggedId","overId","overIndex","Card","text","isDragging","connectDragSource","connectDropTarget","className","CardDragging","Component","connect","dropTarget","dragSource"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport {\n    DragSource,\n    DropTarget,\n    DragSourceMonitor,\n    DropTargetMonitor,\n} from 'react-dnd'\n\nimport styles from './Card.module.css';\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst cardSource = {\n    beginDrag(props: CardProps) {\n        return {\n            id: props.id,\n            originalIndex: props.findCard(props.id).index,\n        }\n    },\n\n    endDrag(props: CardProps, monitor: DragSourceMonitor) {\n        const { id: droppedId, originalIndex } = monitor.getItem()\n        const didDrop = monitor.didDrop()\n        const listId = props.listId\n\n        if (!didDrop) {\n            props.moveCard(listId, droppedId, originalIndex)\n        }\n    },\n}\n\nconst cardTarget = {\n    canDrop() {\n        return false\n    },\n\n    hover(props: CardProps, monitor: DropTargetMonitor) {\n        const { id: draggedId } = monitor.getItem()\n        const { id: overId, listId} = props\n\n        if (draggedId !== overId) {\n            const { index: overIndex } = props.findCard(overId)\n            props.moveCard(listId, draggedId, overIndex)\n        }\n    },\n}\n\nclass Card extends React.Component {\n    render() {\n        const { text, isDragging, connectDragSource, connectDropTarget } = this.props\n        let className = styles.Card\n        if(isDragging){\n            className=styles.CardDragging\n        }\n\n        return connectDragSource(\n            connectDropTarget(<div className={className}>{text}</div>),\n        )\n    }\n}\n\nexport default DropTarget(Types.ITEM, cardTarget,\n    connect => ({\n        connectDropTarget: connect.dropTarget(),\n    }),\n)(\n    DragSource(Types.ITEM, cardSource,\n        (connect, monitor) => ({\n            connectDragSource: connect.dragSource(),\n            isDragging: monitor.isDragging(),\n        }),\n    )(Card))\n\n\n// import * as React from 'react'\n// import { DragSource, DropTarget } from 'react-dnd'\n// import styles from './Card.module.css';\n\n// const Types = {\n//     ITEM: 'card'\n// }\n\n// const cardSource = {\n//     beginDrag(props) {\n//         return {\n//             id: props.id,\n//             originalIndex: props.findCard(props.id).index,\n//         }\n//     },\n\n//     endDrag(props, monitor) {\n//         const { id: droppedId, originalIndex } = monitor.getItem()\n//         const didDrop = monitor.didDrop()\n//         const currentList = props.listId\n\n//         console.log(\"originalIndex\", originalIndex);\n        \n//         if (!didDrop) {\n//             props.moveCard(currentList, droppedId, originalIndex)\n//         }\n//     },\n// }\n\n// const cardTarget = {\n//     canDrop() {\n//         return false\n//     },\n\n//     hover(props, monitor) {\n//         const { id: draggedId } = monitor.getItem()\n//         const { id: overId } = props\n//         const currentList = props.listId\n\n//         if (draggedId !== overId) {\n//             const { index: overIndex } = props.findCard(overId)\n//             props.moveCard(currentList, draggedId, overIndex)\n//         }\n//     },\n// }\n\n// const collectDrop = (connect) => {\n//     return {\n//         connectDropTarget: connect.dropTarget()\n//     }\n// }\n\n// const collectDrag = (connect, monitor) =>{\n//     return {\n//         connectDragSource: connect.dragSource(),\n//         isDragging: monitor.isDragging()\n//     }\n// }\n\n// class Card extends React.Component{\n//     render() {\n//         const { isDragging, connectDragSource, connectDropTarget} = this.props\n//         let className = styles.Card\n//         if(isDragging){\n//             className=styles.CardDragging\n//         }\n//         return connectDragSource(\n//             connectDropTarget(\n//                 <div className={className}>\n//                     {this.props.cardName}\n//                 </div>\n//             )\n//         )\n//     }\n// }\n\n// export default DropTarget(Types.ITEM, cardTarget, collectDrop)(DragSource(Types.ITEM, cardSource, collectDrag)(Card))"]},"metadata":{},"sourceType":"module"}