{"ast":null,"code":"import _toConsumableArray from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from '../actions/actionTypes';\nvar initialState = {\n  lists: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.ADD_LIST:\n      return _objectSpread({}, state, {\n        lists: state.lists.concat(action.listName)\n      });\n\n    case actionTypes.REMOVE_LIST:\n      var newLists = _toConsumableArray(state.lists);\n\n      newLists.slice(newLists.indexOf(action.listName), 1);\n      return _objectSpread({}, state, {\n        lists: newLists\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/store/reducers/lists.js"],"names":["actionTypes","initialState","lists","reducer","state","action","type","ADD_LIST","concat","listName","REMOVE_LIST","newLists","slice","indexOf"],"mappings":";;AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAA+B;AAAA,MAA9BC,KAA8B,uEAAxBH,YAAwB;AAAA,MAAVI,MAAU;;AAC3C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKN,WAAW,CAACO,QAAjB;AACI,+BACOH,KADP;AAEIF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYM,MAAZ,CAAmBH,MAAM,CAACI,QAA1B;AAFX;;AAIJ,SAAKT,WAAW,CAACU,WAAjB;AACI,UAAIC,QAAQ,sBAAOP,KAAK,CAACF,KAAb,CAAZ;;AACAS,MAAAA,QAAQ,CAACC,KAAT,CAAgBD,QAAQ,CAACE,OAAT,CAAiBR,MAAM,CAACI,QAAxB,CAAhB,EAAmD,CAAnD;AACA,+BACOL,KADP;AAEIF,QAAAA,KAAK,EAAES;AAFX;;AAIJ;AACI,aAAOP,KAAP;AAdR;AAgBH,CAjBD;;AAmBA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    lists: []\n};\n\nconst reducer = (state=initialState, action) =>{\n    switch(action.type){\n        case actionTypes.ADD_LIST:\n            return{\n                ...state,\n                lists: state.lists.concat(action.listName)\n            };\n        case actionTypes.REMOVE_LIST:\n            let newLists = [...state.lists];\n            newLists.slice( newLists.indexOf(action.listName), 1 );\n            return{\n                ...state,\n                lists: newLists\n            };\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}