{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js\";\nimport * as React from 'react';\nimport { DropTarget } from 'react-dnd';\nimport Card from '../../components/Card/Card';\nimport InputCard from '../InputCard/InputCard';\nimport { connect } from 'react-redux';\nimport * as listActions from '../../store/actions/lists';\nimport styles from './List.module.css';\nvar Types = {\n  ITEM: 'card'\n};\nvar cardTarget = {\n  drop: function drop() {}\n};\n\nvar collectDrop = function collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nvar List =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(List, _React$Component);\n\n  function List() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.moveCard = function (currentList, id, atIndex) {\n      var _this$findCard = _this.findCard(id),\n          card = _this$findCard.card,\n          index = _this$findCard.index;\n\n      _this.props.onCardMovedInList(currentList, card, index, atIndex);\n    };\n\n    _this.findCard = function (id) {\n      var cards = _this.state.cards;\n      var card = cards.filter(function (c) {\n        return \"\".concat(c.id) === id;\n      })[0];\n      return {\n        card: card,\n        index: cards.indexOf(card)\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var connectDropTarget = this.props.connectDropTarget;\n      var displayCards = Object.keys(this.props.cards).map(function (cardKeys) {\n        return React.createElement(Card, {\n          key: cardKeys,\n          id: cardKeys,\n          cardName: _this2.props.cards[cardKeys].text,\n          currentList: _this2.props.listName,\n          moveCard: _this2.moveCard,\n          findCard: _this2.findCard,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        });\n      });\n      return connectDropTarget(React.createElement(\"div\", {\n        className: styles.List,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, this.props.listName), displayCards, React.createElement(InputCard, {\n        createNewCard: this.props.onCardAdded,\n        cards: this.props.cards,\n        list: this.props.listName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return List;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onCardAdded: function onCardAdded(cardName, listName) {\n      return dispatch(listActions.addCard(cardName, listName));\n    },\n    onCardMovedInList: function onCardMovedInList(listId, cardName, currentIndex, newIndex) {\n      return dispatch(listActions.moveCardInList(listId, cardName, currentIndex, newIndex));\n    } // onCardMovedBetweenLists: (cardName, currentList, droppedList) => dispatch(listActions.moveCard(cardName, currentList, droppedList)),\n\n  };\n};\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(connect(null, mapDispatchToProps)(List));","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js"],"names":["React","DropTarget","Card","InputCard","connect","listActions","styles","Types","ITEM","cardTarget","drop","collectDrop","monitor","connectDropTarget","dropTarget","List","moveCard","currentList","id","atIndex","findCard","card","index","props","onCardMovedInList","cards","state","filter","c","indexOf","displayCards","Object","keys","map","cardKeys","text","listName","onCardAdded","Component","mapDispatchToProps","dispatch","cardName","addCard","listId","currentIndex","newIndex","moveCardInList"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { DropTarget } from 'react-dnd'\nimport Card from '../../components/Card/Card'\nimport InputCard from '../InputCard/InputCard';\nimport { connect } from 'react-redux';\nimport * as listActions from '../../store/actions/lists';\nimport styles from './List.module.css';\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst cardTarget = {\n    drop() {}\n}\n\nconst collectDrop = (connect, monitor) =>{\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nclass List extends React.Component{\n\n    render() {\n        const { connectDropTarget } = this.props\n        const displayCards = Object.keys(this.props.cards).map( cardKeys => {\n            return (\n                <Card key={cardKeys}\n                        id ={cardKeys}\n                        cardName={this.props.cards[cardKeys].text} \n                        currentList={this.props.listName}\n                        moveCard={this.moveCard}\n                        findCard={this.findCard}/>\n            )\n        })\n        return connectDropTarget(\n            <div className={styles.List}>\n                <h4>{this.props.listName}</h4>\n                {displayCards}\n                <InputCard createNewCard={this.props.onCardAdded} \n                            cards={this.props.cards} \n                            list={this.props.listName}/>\n            </div>\n        )\n    }\n\n    moveCard = (currentList, id, atIndex) => {\n        const { card, index } = this.findCard(id)\n        this.props.onCardMovedInList(currentList, card, index, atIndex);\n    }\n\n    findCard = (id) => {\n        const { cards } = this.state\n        const card = cards.filter(c => `${c.id}` === id)[0]\n\n        return {\n            card,\n            index: cards.indexOf(card),\n        }\n    }\n}\n\nconst mapDispatchToProps= dispatch => {\n    return {\n        onCardAdded: (cardName, listName) => dispatch(listActions.addCard(cardName, listName)),\n        onCardMovedInList: (listId, cardName, currentIndex, newIndex) => dispatch(listActions.moveCardInList(listId, cardName, currentIndex, newIndex))\n        // onCardMovedBetweenLists: (cardName, currentList, droppedList) => dispatch(listActions.moveCard(cardName, currentList, droppedList)),\n    }\n}\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(connect(null, mapDispatchToProps)(List))"]},"metadata":{},"sourceType":"module"}