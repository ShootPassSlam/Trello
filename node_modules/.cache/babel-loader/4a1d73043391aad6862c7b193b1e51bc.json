{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js\";\nimport * as React from 'react';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport styles from './Card.module.css';\nvar Types = {\n  ITEM: 'card'\n};\nvar cardSource = {\n  beginDrag: function beginDrag(props) {\n    // console.log(\"BEGIN DRAG PROPS:\")\n    // console.log(\"ID:\", props.id)\n    // console.log(\"ORIGINAL INDEX:\", props.index)\n    // console.log(\"ORIGINAL LIST:\", props.listId)\n    return {\n      id: props.id,\n      originalIndex: props.index,\n      originalListId: props.listId\n    };\n  },\n  endDrag: function endDrag(props, monitor) {\n    var _monitor$getItem = monitor.getItem(),\n        droppedId = _monitor$getItem.id,\n        originalIndex = _monitor$getItem.originalIndex,\n        originalListId = _monitor$getItem.originalListId;\n\n    var didDrop = monitor.didDrop();\n\n    if (!didDrop) {\n      props.moveCard(originalListId, droppedId, originalIndex);\n    }\n  }\n};\nvar cardTarget = {\n  canDrop: function canDrop() {\n    return false;\n  },\n  hover: function hover(props, monitor) {\n    var _monitor$getItem2 = monitor.getItem(),\n        draggedId = _monitor$getItem2.id;\n\n    var hoverId = props.id,\n        hoverIndex = props.index,\n        hoverListId = props.listId;\n    console.log(\"PROPS:\", props);\n    console.log(\"Hover Id:\", hoverId);\n    console.log(\"Hover Index:\", hoverIndex);\n    console.log(\"Hover List Id:\", hoverListId);\n\n    if (draggedId !== hoverId) {\n      var _props$findCard = props.findCard(draggedId),\n          card = _props$findCard.card,\n          draggedIndex = _props$findCard.draggedIndex,\n          draggedListId = _props$findCard.draggedListId;\n\n      props.moveCard(draggedListId, hoverListId, draggedIndex, hoverIndex, card);\n    }\n  }\n};\n\nvar collectDrop = function collectDrop(connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nvar collectDrag = function collectDrag(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n};\n\nvar Card =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          text = _this$props.text,\n          isDragging = _this$props.isDragging,\n          connectDragSource = _this$props.connectDragSource,\n          connectDropTarget = _this$props.connectDropTarget;\n      var className = styles.Card;\n      var height;\n\n      if (isDragging) {\n        className = styles.CardDragging;\n        height = this.myElement.clientHeight;\n      }\n\n      return connectDragSource(connectDropTarget(React.createElement(\"div\", {\n        className: className,\n        ref: function ref(input) {\n          _this.myElement = input;\n        },\n        style: {\n          height: height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, text)));\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(DragSource(Types.ITEM, cardSource, collectDrag)(Card));","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js"],"names":["React","DragSource","DropTarget","styles","Types","ITEM","cardSource","beginDrag","props","id","originalIndex","index","originalListId","listId","endDrag","monitor","getItem","droppedId","didDrop","moveCard","cardTarget","canDrop","hover","draggedId","hoverId","hoverIndex","hoverListId","console","log","findCard","card","draggedIndex","draggedListId","collectDrop","connect","connectDropTarget","dropTarget","collectDrag","connectDragSource","dragSource","isDragging","Card","text","className","height","CardDragging","myElement","clientHeight","input","Component"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { DragSource, DropTarget} from 'react-dnd'\n\nimport styles from './Card.module.css';\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst cardSource = {\n    beginDrag(props) {\n        // console.log(\"BEGIN DRAG PROPS:\")\n        // console.log(\"ID:\", props.id)\n        // console.log(\"ORIGINAL INDEX:\", props.index)\n        // console.log(\"ORIGINAL LIST:\", props.listId)\n        return {\n            id: props.id,\n            originalIndex: props.index,\n            originalListId: props.listId\n        }\n    },\n\n    endDrag(props, monitor) {\n        const { id: droppedId, originalIndex, originalListId} = monitor.getItem()\n        const didDrop = monitor.didDrop()\n\n        if (!didDrop) {\n            props.moveCard(originalListId, droppedId, originalIndex)\n        }\n    },\n}\n\nconst cardTarget = {\n    canDrop() {\n        return false\n    },\n\n    hover(props, monitor) {\n        const { id: draggedId} = monitor.getItem()\n        const { id: hoverId, index: hoverIndex, listId: hoverListId} = props\n        console.log(\"PROPS:\", props)\n        console.log(\"Hover Id:\", hoverId)\n        console.log(\"Hover Index:\", hoverIndex)\n        console.log(\"Hover List Id:\", hoverListId)\n\n        if (draggedId !== hoverId) {\n            const { card, draggedIndex, draggedListId } = props.findCard(draggedId)\n            props.moveCard(draggedListId, hoverListId, draggedIndex, hoverIndex, card)\n        }\n    },\n}\n\nconst collectDrop = (connect) => {\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nconst collectDrag = (connect, monitor) =>{\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nclass Card extends React.Component {\n    render() {\n        const { text, isDragging, connectDragSource, connectDropTarget } = this.props\n        let className = styles.Card\n        let height\n        if(isDragging){\n            className=styles.CardDragging\n            height = this.myElement.clientHeight\n        }\n\n        return connectDragSource(\n            connectDropTarget(<div className={className} ref={input => { this.myElement = input; }} style={{height}}>{text}</div>),\n        )\n    }\n}\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(DragSource(Types.ITEM, cardSource, collectDrag)(Card))"]},"metadata":{},"sourceType":"module"}