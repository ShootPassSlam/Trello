{"ast":null,"code":"import _objectSpread from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/Lists/Lists.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styles from './Lists.module.css';\nimport List from '../List/List';\nimport InputList from '../InputList/InputList';\nimport * as listActions from '../../store/actions/lists';\n\nvar Lists =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Lists, _Component);\n\n  function Lists() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Lists);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Lists)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      lists: {}\n    };\n\n    _this.updateListState = function (listName) {\n      var newLists = _objectSpread({}, _this.state.lists);\n\n      newLists[listName] = [];\n\n      _this.setState({\n        lists: newLists\n      });\n    };\n\n    _this.updateCardState = function (cardName, listName) {\n      var newCards = _objectSpread({}, _this.state.lists);\n\n      newCards[listName].push(cardName);\n\n      _this.setState({\n        cards: newCards\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Lists, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var displayLists = Object.keys(this.state.lists).map(function (listKeys) {\n        return React.createElement(List, {\n          key: listKeys,\n          listName: listKeys,\n          cards: _this2.state.lists[listKeys],\n          createNewCard: function createNewCard(cardName, listName) {\n            return _this2.updateCardState(cardName, listName);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: styles.Lists,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, displayLists, React.createElement(InputList, {\n        createNewList: function createNewList(listName) {\n          return _this2.updateListState(listName);\n        },\n        lists: this.state.lists,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Lists;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    ings: state.ingredients\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onIngredientAdded: function onIngredientAdded(ingName) {\n      return dispatch(listActions.addIngredient(ingName));\n    },\n    onIngredientRemoved: function onIngredientRemoved(ingName) {\n      return dispatch(listActions.removeIngredient(ingName));\n    },\n    onInitIngredients: function onInitIngredients() {\n      return dispatch(listActions.initIngredients());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lists);","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/Lists/Lists.js"],"names":["React","Component","connect","styles","List","InputList","listActions","Lists","state","lists","updateListState","listName","newLists","setState","updateCardState","cardName","newCards","push","cards","displayLists","Object","keys","map","listKeys","mapStateToProps","ings","ingredients","mapDispatchToProps","dispatch","onIngredientAdded","ingName","addIngredient","onIngredientRemoved","removeIngredient","onInitIngredients","initIngredients"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAO,KAAKC,WAAZ,MAA6B,2BAA7B;;IAEMC,K;;;;;;;;;;;;;;;;;UACFC,K,GAAM;AACFC,MAAAA,KAAK,EAAE;AADL,K;;UAINC,e,GAAkB,UAACC,QAAD,EAAc;AAC5B,UAAIC,QAAQ,qBAAM,MAAKJ,KAAL,CAAWC,KAAjB,CAAZ;;AACAG,MAAAA,QAAQ,CAACD,QAAD,CAAR,GAAmB,EAAnB;;AACA,YAAKE,QAAL,CAAc;AAACJ,QAAAA,KAAK,EAAEG;AAAR,OAAd;AACH,K;;UAEDE,e,GAAkB,UAACC,QAAD,EAAWJ,QAAX,EAAwB;AACtC,UAAIK,QAAQ,qBAAK,MAAKR,KAAL,CAAWC,KAAhB,CAAZ;;AACAO,MAAAA,QAAQ,CAACL,QAAD,CAAR,CAAmBM,IAAnB,CAAwBF,QAAxB;;AACA,YAAKF,QAAL,CAAc;AAACK,QAAAA,KAAK,EAAEF;AAAR,OAAd;AACH,K;;;;;;;6BAEO;AAAA;;AACJ,UAAMG,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKb,KAAL,CAAWC,KAAvB,EAA8Ba,GAA9B,CAAmC,UAAAC,QAAQ,EAAI;AAC5D,eAAO,oBAAC,IAAD;AACH,UAAA,GAAG,EAAEA,QADF;AAEH,UAAA,QAAQ,EAAEA,QAFP;AAGH,UAAA,KAAK,EAAE,MAAI,CAACf,KAAL,CAAWC,KAAX,CAAiBc,QAAjB,CAHJ;AAIH,UAAA,aAAa,EAAE,uBAACR,QAAD,EAAWJ,QAAX;AAAA,mBAAuB,MAAI,CAACG,eAAL,CAAqBC,QAArB,EAA+BJ,QAA/B,CAAvB;AAAA,WAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAKH,OANgB,CAArB;AAQA,aACI;AAAK,QAAA,SAAS,EAAER,MAAM,CAACI,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKY,YADL,EAEI,oBAAC,SAAD;AAAW,QAAA,aAAa,EAAE,uBAACR,QAAD;AAAA,iBAAa,MAAI,CAACD,eAAL,CAAqBC,QAArB,CAAb;AAAA,SAA1B;AAAuE,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,KAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAMH;;;;EAhCeR,S;;AAmCpB,IAAMuB,eAAe,GAAG,SAAlBA,eAAkB,CAAAhB,KAAK,EAAI;AAC7B,SAAO;AACHiB,IAAAA,IAAI,EAAEjB,KAAK,CAACkB;AADT,GAAP;AAGH,CAJD;;AAKA,IAAMC,kBAAkB,GAAE,SAApBA,kBAAoB,CAAAC,QAAQ,EAAI;AAClC,SAAO;AACHC,IAAAA,iBAAiB,EAAE,2BAACC,OAAD;AAAA,aAAaF,QAAQ,CAACtB,WAAW,CAACyB,aAAZ,CAA0BD,OAA1B,CAAD,CAArB;AAAA,KADhB;AAEHE,IAAAA,mBAAmB,EAAE,6BAACF,OAAD;AAAA,aAAaF,QAAQ,CAACtB,WAAW,CAAC2B,gBAAZ,CAA6BH,OAA7B,CAAD,CAArB;AAAA,KAFlB;AAGHI,IAAAA,iBAAiB,EAAE;AAAA,aAAMN,QAAQ,CAACtB,WAAW,CAAC6B,eAAZ,EAAD,CAAd;AAAA;AAHhB,GAAP;AAKH,CAND;;AAQA,eAAejC,OAAO,CAACsB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CpB,KAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styles from './Lists.module.css';\nimport List from '../List/List';\nimport InputList from '../InputList/InputList';\nimport * as listActions from '../../store/actions/lists';\n\nclass Lists extends Component {\n    state={\n        lists: {}\n    }\n\n    updateListState = (listName) => {\n        let newLists= {...this.state.lists};\n        newLists[listName]=[]\n        this.setState({lists: newLists});\n    }\n\n    updateCardState = (cardName, listName) => {\n        let newCards={...this.state.lists};\n        newCards[listName].push(cardName);\n        this.setState({cards: newCards});\n    }\n\n    render(){\n        const displayLists = Object.keys(this.state.lists).map( listKeys => {\n                return <List \n                    key={listKeys} \n                    listName={listKeys} \n                    cards={this.state.lists[listKeys]} \n                    createNewCard={(cardName, listName)=> this.updateCardState(cardName, listName)}/>;\n            })\n\n        return(\n            <div className={styles.Lists}>\n                {displayLists}\n                <InputList createNewList={(listName)=> this.updateListState(listName)} lists={this.state.lists}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.ingredients,\n    };\n}\nconst mapDispatchToProps= dispatch => {\n    return {\n        onIngredientAdded: (ingName) => dispatch(listActions.addIngredient(ingName)),\n        onIngredientRemoved: (ingName) => dispatch(listActions.removeIngredient(ingName)),\n        onInitIngredients: () => dispatch(listActions.initIngredients())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lists);"]},"metadata":{},"sourceType":"module"}