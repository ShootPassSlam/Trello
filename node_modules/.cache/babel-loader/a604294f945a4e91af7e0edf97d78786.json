{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styles from './List.module.css';\nimport Card from '../../components/Card/Card';\nimport InputCard from '../InputCard/InputCard';\nimport * as listActions from '../../store/actions/lists';\nimport { DropTarget } from 'react-dnd';\nvar Types = {\n  ITEM: 'card'\n};\nvar cardTarget = {\n  drop: function drop() {}\n};\n\nvar collectDrop = function collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nvar List =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(List, _Component);\n\n  function List() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.moveCard = function (oldId, newId) {\n      var card = _this.props.cards[oldId];\n\n      _this.props.onCardMovedInList(_this.props.listName, card, oldId, newId);\n    };\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var connectDropTarget = this.props.connectDropTarget;\n      var displayCards = this.props.cards.map(function (cardName, index) {\n        return React.createElement(Card, {\n          key: cardName + index,\n          id: index,\n          cardName: cardName,\n          currentList: _this2.props.listName,\n          moveCard: _this2.moveCard,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        });\n      });\n      return connectDropTarget(React.createElement(\"div\", {\n        className: styles.List,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, this.props.listName), displayCards, React.createElement(InputCard, {\n        createNewCard: this.props.onCardAdded,\n        cards: this.props.cards,\n        list: this.props.listName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return List;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onCardAdded: function onCardAdded(cardName, listName) {\n      return dispatch(listActions.addCard(cardName, listName));\n    },\n    onCardMovedInList: function onCardMovedInList(listName, cardName, currentIndex, newIndex) {\n      return dispatch(listActions.moveCardInList(listName, cardName, currentIndex, newIndex));\n    } // onCardMovedBetweenLists: (cardName, currentList, droppedList) => dispatch(listActions.moveCard(cardName, currentList, droppedList)),\n\n  };\n};\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(connect(null, mapDispatchToProps)(List));","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js"],"names":["React","Component","connect","styles","Card","InputCard","listActions","DropTarget","Types","ITEM","cardTarget","drop","collectDrop","monitor","connectDropTarget","dropTarget","List","moveCard","oldId","newId","card","props","cards","onCardMovedInList","listName","displayCards","map","cardName","index","onCardAdded","mapDispatchToProps","dispatch","addCard","currentIndex","newIndex","moveCardInList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styles from './List.module.css';\nimport Card from '../../components/Card/Card';\nimport InputCard from '../InputCard/InputCard';\nimport * as listActions from '../../store/actions/lists';\n\nimport { DropTarget } from 'react-dnd'\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst cardTarget = {\n    drop() {}\n}\n\nconst collectDrop = (connect, monitor) => {\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nclass List extends Component {\n\n    moveCard = (oldId, newId) => {\n        const card = this.props.cards[oldId]\n        this.props.onCardMovedInList(this.props.listName, card, oldId, newId);\n    }\n\n\n    render(){\n        const { connectDropTarget } = this.props\n        const displayCards = this.props.cards.map((cardName, index)=> {\n            return (\n                <Card key={cardName+index}\n                        id ={index}\n                        cardName={cardName} \n                        currentList={this.props.listName}\n                        moveCard={this.moveCard}/>\n            )\n        })\n        return connectDropTarget(\n            <div className={styles.List}>\n                <h4>{this.props.listName}</h4>\n                {displayCards}\n                <InputCard createNewCard={this.props.onCardAdded} \n                            cards={this.props.cards} \n                            list={this.props.listName}/>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps= dispatch => {\n    return {\n        onCardAdded: (cardName, listName) => dispatch(listActions.addCard(cardName, listName)),\n        onCardMovedInList: (listName, cardName, currentIndex, newIndex) => dispatch(listActions.moveCardInList(listName, cardName, currentIndex, newIndex))\n        // onCardMovedBetweenLists: (cardName, currentList, droppedList) => dispatch(listActions.moveCard(cardName, currentList, droppedList)),\n    }\n}\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(connect(null, mapDispatchToProps)(List));"]},"metadata":{},"sourceType":"module"}