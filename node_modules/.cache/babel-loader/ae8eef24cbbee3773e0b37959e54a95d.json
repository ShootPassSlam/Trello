{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js\";\nimport React, { Component } from 'react';\nimport styles from './Card.module.css';\nimport flow from 'lodash/flow';\nimport { DragSource, DropTarget } from 'react-dnd';\nvar Types = {\n  ITEM: 'card'\n};\nvar itemSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      id: props.id,\n      originalIndex: props.findCard(props.id).index\n    };\n  },\n  endDrag: function endDrag(props, monitor) {\n    var _monitor$getItem = monitor.getItem(),\n        droppedId = _monitor$getItem.droppedId,\n        originalIndex = _monitor$getItem.originalIndex;\n\n    if (!monitor.didDrop()) {\n      props.moveCard(droppedId, originalIndex);\n    }\n  }\n};\nvar box = {\n  canDrop: function canDrop() {\n    return false;\n  },\n  hover: function hover(props, monitor) {\n    console.log(\"in hover\");\n    var draggedId = monitor.getItem();\n    var overId = props;\n\n    if (draggedId !== overId) {\n      console.log(\"in hover if\");\n      var overIndex = props.findCard(overId);\n      props.moveCard(draggedId, overIndex);\n    }\n  }\n};\n\nvar collectDrag = function collectDrag(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n};\n\nvar collectDrop = function collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nvar Card =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Card, _Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isDragging = _this$props.isDragging,\n          connectDragSource = _this$props.connectDragSource,\n          connectDropTarget = _this$props.connectDropTarget;\n      var className = styles.Card;\n\n      if (isDragging) {\n        className = styles.CardDragging;\n      }\n\n      return connectDragSource(connectDropTarget(React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, this.props.cardName)));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\nexport default flow(DragSource(Types.ITEM, itemSource, collectDrag), DropTarget(Types.ITEM, box, collectDrop))(Card);","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js"],"names":["React","Component","styles","flow","DragSource","DropTarget","Types","ITEM","itemSource","beginDrag","props","id","originalIndex","findCard","index","endDrag","monitor","getItem","droppedId","didDrop","moveCard","box","canDrop","hover","console","log","draggedId","overId","overIndex","collectDrag","connect","connectDragSource","dragSource","isDragging","collectDrop","connectDropTarget","dropTarget","Card","className","CardDragging","cardName"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,WAAvC;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,IAAI,EAAE;AADI,CAAd;AAKA,IAAMC,UAAU,GAAG;AACfC,EAAAA,SADe,qBACLC,KADK,EACE;AACb,WAAO;AACHC,MAAAA,EAAE,EAAED,KAAK,CAACC,EADP;AAEHC,MAAAA,aAAa,EAAEF,KAAK,CAACG,QAAN,CAAeH,KAAK,CAACC,EAArB,EAAyBG;AAFrC,KAAP;AAIH,GANc;AAOfC,EAAAA,OAPe,mBAOPL,KAPO,EAOAM,OAPA,EAOS;AAAA,2BACiBA,OAAO,CAACC,OAAR,EADjB;AAAA,QACZC,SADY,oBACZA,SADY;AAAA,QACDN,aADC,oBACDA,aADC;;AAGpB,QAAI,CAACI,OAAO,CAACG,OAAR,EAAL,EAAwB;AACpBT,MAAAA,KAAK,CAACU,QAAN,CAAeF,SAAf,EAA0BN,aAA1B;AACH;AACJ;AAbc,CAAnB;AAgBA,IAAMS,GAAG,GAAG;AACRC,EAAAA,OADQ,qBACE;AACN,WAAO,KAAP;AACH,GAHO;AAIRC,EAAAA,KAJQ,iBAIFb,KAJE,EAIKM,OAJL,EAIc;AAClBQ,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAMC,SAAS,GAAGV,OAAO,CAACC,OAAR,EAAlB;AACA,QAAMU,MAAM,GAAGjB,KAAf;;AAEA,QAAIgB,SAAS,KAAKC,MAAlB,EAA0B;AACtBH,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,UAAMG,SAAS,GAAGlB,KAAK,CAACG,QAAN,CAAec,MAAf,CAAlB;AACAjB,MAAAA,KAAK,CAACU,QAAN,CAAeM,SAAf,EAA0BE,SAA1B;AACH;AACJ;AAdO,CAAZ;;AAiBA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAUd,OAAV,EAAqB;AACrC,SAAO;AACHe,IAAAA,iBAAiB,EAAED,OAAO,CAACE,UAAR,EADhB;AAEHC,IAAAA,UAAU,EAAEjB,OAAO,CAACiB,UAAR;AAFT,GAAP;AAIH,CALD;;AAOA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACJ,OAAD,EAAUd,OAAV,EAAsB;AACtC,SAAO;AACHmB,IAAAA,iBAAiB,EAAEL,OAAO,CAACM,UAAR;AADhB,GAAP;AAGH,CAJD;;IAMMC,I;;;;;;;;;;;;;6BAEO;AAAA,wBACuD,KAAK3B,KAD5D;AAAA,UACGuB,UADH,eACGA,UADH;AAAA,UACeF,iBADf,eACeA,iBADf;AAAA,UACkCI,iBADlC,eACkCA,iBADlC;AAEL,UAAIG,SAAS,GAAGpC,MAAM,CAACmC,IAAvB;;AACA,UAAGJ,UAAH,EAAc;AACVK,QAAAA,SAAS,GAACpC,MAAM,CAACqC,YAAjB;AACH;;AACD,aAAOR,iBAAiB,CACpBI,iBAAiB,CACb;AAAK,QAAA,SAAS,EAAEG,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK5B,KAAL,CAAW8B,QADhB,CADa,CADG,CAAxB;AAOH;;;;EAfcvC,S;;AAkBnB,eAAeE,IAAI,CACfC,UAAU,CAACE,KAAK,CAACC,IAAP,EAAaC,UAAb,EAAyBqB,WAAzB,CADK,EAEfxB,UAAU,CAACC,KAAK,CAACC,IAAP,EAAac,GAAb,EAAkBa,WAAlB,CAFK,CAAJ,CAGbG,IAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport styles from './Card.module.css';\nimport flow from 'lodash/flow';\n\nimport { DragSource, DropTarget } from 'react-dnd'\n\nconst Types = {\n    ITEM: 'card'\n}\n\n\nconst itemSource = {\n    beginDrag(props) {\n        return {\n            id: props.id,\n            originalIndex: props.findCard(props.id).index,\n        }\n    },\n    endDrag(props, monitor) {\n        const { droppedId, originalIndex } = monitor.getItem()\n\n        if (!monitor.didDrop()) {\n            props.moveCard(droppedId, originalIndex)\n        }\n    }\n}\n\nconst box = {\n    canDrop() {\n        return false\n    },\n    hover(props, monitor) {\n        console.log(\"in hover\");\n        const draggedId = monitor.getItem()\n        const overId = props\n\n        if (draggedId !== overId) {\n            console.log(\"in hover if\");\n            const overIndex = props.findCard(overId)\n            props.moveCard(draggedId, overIndex)\n        }\n    }\n}\n\nconst collectDrag = (connect, monitor) =>{\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nconst collectDrop = (connect, monitor) => {\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nclass Card extends Component {\n\n    render() {\n        const { isDragging, connectDragSource, connectDropTarget} = this.props\n        let className = styles.Card\n        if(isDragging){\n            className=styles.CardDragging\n        }\n        return connectDragSource(\n            connectDropTarget(\n                <div className={className}>\n                    {this.props.cardName}\n                </div>\n            )\n        )\n    }\n}\n\nexport default flow(\n    DragSource(Types.ITEM, itemSource, collectDrag),\n    DropTarget(Types.ITEM, box, collectDrop)\n)(Card)"]},"metadata":{},"sourceType":"module"}