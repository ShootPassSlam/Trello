{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/InputList/InputList.js\";\nimport React, { Component } from 'react';\nimport styles from './InputList.module.css';\n\nvar InputList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(InputList, _Component);\n\n  function InputList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, InputList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(InputList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      loading: false // orderHander = (event) => {\n      //     event.preventDefault();\n      //     const formData= {};\n      //     for (let formElementIdentifier in this.state.orderForm){\n      //         formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      //     }\n      //     const order ={\n      //         ingredients: this.props.ings,\n      //         price: this.props.price,\n      //         orderData: formData\n      //     }\n      //     this.props.onOrderBurger(order);\n      // }\n      // checkValidity(value, rules={}){\n      //     let isValid = true\n      //     if(rules.required){\n      //         isValid = value.trim() !== '' && isValid;\n      //     }\n      //     if(rules.minLength){\n      //         isValid = value.length >=rules.minLength && isValid;\n      //     }\n      //     if(rules.maxLength){\n      //         isValid = value.length <=rules.maxLength && isValid;\n      //     }\n      //     return isValid;\n      // }\n      // inputChangedHandler = (event, inputIdentifier) => {\n      //     const updatedOrderForm ={\n      //         ...this.state.orderForm\n      //     };\n      //     const updatedFormElement = {\n      //         ...updatedOrderForm[inputIdentifier]\n      //     };\n      //     updatedFormElement.value = event.target.value;\n      //     updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      //     updatedFormElement.touched = true;\n      //     updatedOrderForm[inputIdentifier] =updatedFormElement;\n      //     let formIsValid = true;\n      //     for(let inputIdentifier in updatedOrderForm){\n      //         formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      //     }\n      //     this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n      // }\n\n    };\n    return _this;\n  }\n\n  _createClass(InputList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.orderHander,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, formElementArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"ORDER\"));\n\n      if (this.state.loading) {\n        form = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: styles.ContactData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Enter Your Contact Data\"), form);\n    }\n  }]);\n\n  return InputList;\n}(Component);\n\nexport default InputList;","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/InputList/InputList.js"],"names":["React","Component","styles","InputList","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","formIsValid","loading","formElementArray","key","push","id","config","form","orderHander","map","formElement","event","inputChangedHandler","ContactData"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport styles from './InputList.module.css';\n\nclass InputList extends Component{\n    state={\n        orderForm:{\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: \"\",\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        formIsValid: false,\n        loading: false\n    }\n    \n    // orderHander = (event) => {\n    //     event.preventDefault();\n    //     const formData= {};\n    //     for (let formElementIdentifier in this.state.orderForm){\n    //         formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n    //     }\n    //     const order ={\n    //         ingredients: this.props.ings,\n    //         price: this.props.price,\n    //         orderData: formData\n    //     }\n\n    //     this.props.onOrderBurger(order);\n    // }\n\n    // checkValidity(value, rules={}){\n    //     let isValid = true\n    //     if(rules.required){\n    //         isValid = value.trim() !== '' && isValid;\n    //     }\n\n    //     if(rules.minLength){\n    //         isValid = value.length >=rules.minLength && isValid;\n    //     }\n    //     if(rules.maxLength){\n    //         isValid = value.length <=rules.maxLength && isValid;\n    //     }\n\n    //     return isValid;\n    // }\n\n    // inputChangedHandler = (event, inputIdentifier) => {\n    //     const updatedOrderForm ={\n    //         ...this.state.orderForm\n    //     };\n    //     const updatedFormElement = {\n    //         ...updatedOrderForm[inputIdentifier]\n    //     };\n    //     updatedFormElement.value = event.target.value;\n    //     updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    //     updatedFormElement.touched = true;\n    //     updatedOrderForm[inputIdentifier] =updatedFormElement;\n\n    //     let formIsValid = true;\n    //     for(let inputIdentifier in updatedOrderForm){\n    //         formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    //     }\n\n    //     this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    // }\n\n    render (){\n        const formElementArray=[];\n        for (let key in this.state.orderForm){\n            formElementArray.push({\n                id:key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n                <form onSubmit={this.orderHander}>\n                    {formElementArray.map(formElement=>(\n                        <Input \n                            key={formElement.id}\n                            elementType={formElement.config.elementType} \n                            elementConfig={formElement.config.elementConfig}\n                            value={formElement.config.value}\n                            invalid={!formElement.config.valid}\n                            shouldValidate={formElement.config.validation}\n                            touched ={formElement.config.touched}\n                            changed={ (event)=> this.inputChangedHandler(event, formElement.id)}/>\n                    ))}\n                    <Button btnType='Success' disabled={!this.state.formIsValid}>ORDER</Button>\n                </form>\n            );\n        if(this.state.loading) {\n            form = <Spinner/>;\n        }\n        return(\n            <div className={styles.ContactData}>\n                <h4>Enter Your Contact Data</h4>   \n                {form}\n            </div>\n        );\n    }\n}\n\nexport default InputList;"]},"metadata":{},"sourceType":"module"}