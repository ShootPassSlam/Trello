{"ast":null,"code":"var _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js\";\nimport React from 'react';\nimport { DragSource } from 'react-dnd';\nimport styles from './Card.module.css'; // Drag sources and drop targets only interact\n// if they have the same string type.\n// You want to keep types in a separate file with\n// the rest of your app's constants.\n\nvar Types = {\n  CARD: 'card'\n};\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\n\nvar cardSource = {\n  beginDrag: function beginDrag(props) {\n    // Return the data describing the dragged item\n    var item = {\n      cardName: props.cardName\n    };\n    return item;\n  },\n  endDrag: function endDrag(props, monitor, component) {\n    if (!monitor.didDrop()) {\n      return;\n    } // When dropped on a compatible target, do something\n\n\n    var item = monitor.getItem();\n    var dropResult = monitor.getDropResult();\n    CardActions.moveCardToList(item.cardName, dropResult.listId);\n  }\n};\n/**\n * Specifies which props to inject into your component.\n */\n\nfunction collect(connect, monitor) {\n  return {\n    // Call this function inside render()\n    // to let React DnD handle the drag events:\n    connectDragSource: connect.dragSource(),\n    // You can ask the monitor about the current drag state:\n    isDragging: monitor.isDragging()\n  };\n}\n\nfunction Card(props) {\n  // Your component receives its own props as usual\n  var id = props.id; // These two props are injected by React DnD,\n  // as defined by your `collect` function above:\n\n  var isDragging = props.isDragging,\n      connectDragSource = props.connectDragSource;\n  return connectDragSource(React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"I am a draggable card number \", id, isDragging && ' (and I am being dragged now)'));\n} // Export the wrapped version\n\n\nexport default DragSource(Types.CARD, cardSource, collect)(Card); // const card = (props) => (\n//     <div className={styles.Card}>{props.cardName}</div>\n// );\n// export default card;","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js"],"names":["React","DragSource","styles","Types","CARD","cardSource","beginDrag","props","item","cardName","endDrag","monitor","component","didDrop","getItem","dropResult","getDropResult","CardActions","moveCardToList","listId","collect","connect","connectDragSource","dragSource","isDragging","Card","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,WAA3B;AAEA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;AACA;AACA;AACA;;AACA,IAAMC,KAAK,GAAG;AACZC,EAAAA,IAAI,EAAE;AADM,CAAd;AAIA;;;;;AAIA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,SADiB,qBACPC,KADO,EACA;AACf;AACA,QAAMC,IAAI,GAAG;AAAEC,MAAAA,QAAQ,EAAEF,KAAK,CAACE;AAAlB,KAAb;AACA,WAAOD,IAAP;AACD,GALgB;AAOjBE,EAAAA,OAPiB,mBAOTH,KAPS,EAOFI,OAPE,EAOOC,SAPP,EAOkB;AACjC,QAAI,CAACD,OAAO,CAACE,OAAR,EAAL,EAAwB;AACtB;AACD,KAHgC,CAKjC;;;AACA,QAAML,IAAI,GAAGG,OAAO,CAACG,OAAR,EAAb;AACA,QAAMC,UAAU,GAAGJ,OAAO,CAACK,aAAR,EAAnB;AACAC,IAAAA,WAAW,CAACC,cAAZ,CAA2BV,IAAI,CAACC,QAAhC,EAA0CM,UAAU,CAACI,MAArD;AACD;AAhBgB,CAAnB;AAmBA;;;;AAGA,SAASC,OAAT,CAAiBC,OAAjB,EAA0BV,OAA1B,EAAmC;AACjC,SAAO;AACL;AACA;AACAW,IAAAA,iBAAiB,EAAED,OAAO,CAACE,UAAR,EAHd;AAIL;AACAC,IAAAA,UAAU,EAAEb,OAAO,CAACa,UAAR;AALP,GAAP;AAOD;;AAED,SAASC,IAAT,CAAclB,KAAd,EAAqB;AACnB;AADmB,MAEXmB,EAFW,GAEJnB,KAFI,CAEXmB,EAFW,EAInB;AACA;;AALmB,MAMXF,UANW,GAMuBjB,KANvB,CAMXiB,UANW;AAAA,MAMCF,iBAND,GAMuBf,KANvB,CAMCe,iBAND;AAQnB,SAAOA,iBAAiB,CACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCACgCI,EADhC,EAEGF,UAAU,IAAI,+BAFjB,CADsB,CAAxB;AAMD,C,CAED;;;AACA,eAAevB,UAAU,CAACE,KAAK,CAACC,IAAP,EAAaC,UAAb,EAAyBe,OAAzB,CAAV,CAA4CK,IAA5C,CAAf,C,CAGA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\nimport { DragSource } from 'react-dnd';\n\nimport styles from './Card.module.css';\n\n// Drag sources and drop targets only interact\n// if they have the same string type.\n// You want to keep types in a separate file with\n// the rest of your app's constants.\nconst Types = {\n  CARD: 'card'\n};\n\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\nconst cardSource = {\n  beginDrag(props) {\n    // Return the data describing the dragged item\n    const item = { cardName: props.cardName };\n    return item;\n  },\n\n  endDrag(props, monitor, component) {\n    if (!monitor.didDrop()) {\n      return;\n    }\n\n    // When dropped on a compatible target, do something\n    const item = monitor.getItem();\n    const dropResult = monitor.getDropResult();\n    CardActions.moveCardToList(item.cardName, dropResult.listId);\n  }\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect, monitor) {\n  return {\n    // Call this function inside render()\n    // to let React DnD handle the drag events:\n    connectDragSource: connect.dragSource(),\n    // You can ask the monitor about the current drag state:\n    isDragging: monitor.isDragging()\n  };\n}\n\nfunction Card(props) {\n  // Your component receives its own props as usual\n  const { id } = props;\n\n  // These two props are injected by React DnD,\n  // as defined by your `collect` function above:\n  const { isDragging, connectDragSource } = props;\n\n  return connectDragSource(\n    <div>\n      I am a draggable card number {id}\n      {isDragging && ' (and I am being dragged now)'}\n    </div>\n  );\n}\n\n// Export the wrapped version\nexport default DragSource(Types.CARD, cardSource, collect)(Card);\n\n\n// const card = (props) => (\n//     <div className={styles.Card}>{props.cardName}</div>\n// );\n\n// export default card;"]},"metadata":{},"sourceType":"module"}