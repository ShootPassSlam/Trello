{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js\";\nimport React, { Component } from 'react';\nimport styles from './Card.module.css';\nimport flow from 'lodash/flow';\nimport { DragSource, DropTarget } from 'react-dnd';\nvar Types = {\n  ITEM: 'card'\n};\nvar itemSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      id: props.id\n    };\n  },\n  endDrag: function endDrag(props, monitor) {\n    var droppedId = monitor.getItem().id;\n\n    if (!monitor.didDrop()) {\n      props.moveCard(droppedId, droppedId);\n    }\n  }\n};\nvar box = {\n  canDrop: function canDrop() {\n    return false;\n  },\n  hover: function hover(props, monitor) {\n    var draggedId = monitor.getItem().id;\n    var overId = props.id;\n\n    if (draggedId !== overId) {\n      console.log(\"Over new card\");\n      console.log(\"original id:\", draggedId);\n      console.log(\"new id:\", overId);\n      props.moveCard(draggedId, overId);\n    }\n  }\n};\n\nvar collectDrag = function collectDrag(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n};\n\nvar collectDrop = function collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nvar Card =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Card, _Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isDragging = _this$props.isDragging,\n          connectDragSource = _this$props.connectDragSource,\n          connectDropTarget = _this$props.connectDropTarget;\n      var className = styles.Card;\n\n      if (isDragging) {\n        className = styles.CardDragging;\n      }\n\n      return connectDragSource(connectDropTarget(React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.props.cardName)));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\nexport default flow(DragSource(Types.ITEM, itemSource, collectDrag), DropTarget(Types.ITEM, box, collectDrop))(Card);","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js"],"names":["React","Component","styles","flow","DragSource","DropTarget","Types","ITEM","itemSource","beginDrag","props","id","endDrag","monitor","droppedId","getItem","didDrop","moveCard","box","canDrop","hover","draggedId","overId","console","log","collectDrag","connect","connectDragSource","dragSource","isDragging","collectDrop","connectDropTarget","dropTarget","Card","className","CardDragging","cardName"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,WAAvC;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,IAAI,EAAE;AADI,CAAd;AAKA,IAAMC,UAAU,GAAG;AACfC,EAAAA,SADe,qBACLC,KADK,EACE;AACb,WAAO;AACHC,MAAAA,EAAE,EAAED,KAAK,CAACC;AADP,KAAP;AAGH,GALc;AAMfC,EAAAA,OANe,mBAMPF,KANO,EAMAG,OANA,EAMS;AACpB,QAAMC,SAAS,GAAGD,OAAO,CAACE,OAAR,GAAkBJ,EAApC;;AAEA,QAAI,CAACE,OAAO,CAACG,OAAR,EAAL,EAAwB;AACpBN,MAAAA,KAAK,CAACO,QAAN,CAAeH,SAAf,EAA0BA,SAA1B;AACH;AACJ;AAZc,CAAnB;AAeA,IAAMI,GAAG,GAAG;AACRC,EAAAA,OADQ,qBACE;AACN,WAAO,KAAP;AACH,GAHO;AAIRC,EAAAA,KAJQ,iBAIFV,KAJE,EAIKG,OAJL,EAIc;AAClB,QAAMQ,SAAS,GAAGR,OAAO,CAACE,OAAR,GAAkBJ,EAApC;AACA,QAAMW,MAAM,GAAGZ,KAAK,CAACC,EAArB;;AAEA,QAAIU,SAAS,KAAKC,MAAlB,EAA0B;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,SAA5B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACAZ,MAAAA,KAAK,CAACO,QAAN,CAAeI,SAAf,EAA0BC,MAA1B;AACH;AACJ;AAdO,CAAZ;;AAiBA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAUb,OAAV,EAAqB;AACrC,SAAO;AACHc,IAAAA,iBAAiB,EAAED,OAAO,CAACE,UAAR,EADhB;AAEHC,IAAAA,UAAU,EAAEhB,OAAO,CAACgB,UAAR;AAFT,GAAP;AAIH,CALD;;AAOA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACJ,OAAD,EAAUb,OAAV,EAAsB;AACtC,SAAO;AACHkB,IAAAA,iBAAiB,EAAEL,OAAO,CAACM,UAAR;AADhB,GAAP;AAGH,CAJD;;IAMMC,I;;;;;;;;;;;;;6BAEO;AAAA,wBACuD,KAAKvB,KAD5D;AAAA,UACGmB,UADH,eACGA,UADH;AAAA,UACeF,iBADf,eACeA,iBADf;AAAA,UACkCI,iBADlC,eACkCA,iBADlC;AAEL,UAAIG,SAAS,GAAGhC,MAAM,CAAC+B,IAAvB;;AACA,UAAGJ,UAAH,EAAc;AACVK,QAAAA,SAAS,GAAChC,MAAM,CAACiC,YAAjB;AACH;;AACD,aAAOR,iBAAiB,CACpBI,iBAAiB,CACb;AAAK,QAAA,SAAS,EAAEG,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKxB,KAAL,CAAW0B,QADhB,CADa,CADG,CAAxB;AAOH;;;;EAfcnC,S;;AAkBnB,eAAeE,IAAI,CACfC,UAAU,CAACE,KAAK,CAACC,IAAP,EAAaC,UAAb,EAAyBiB,WAAzB,CADK,EAEfpB,UAAU,CAACC,KAAK,CAACC,IAAP,EAAaW,GAAb,EAAkBY,WAAlB,CAFK,CAAJ,CAGbG,IAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport styles from './Card.module.css';\nimport flow from 'lodash/flow';\n\nimport { DragSource, DropTarget } from 'react-dnd'\n\nconst Types = {\n    ITEM: 'card'\n}\n\n\nconst itemSource = {\n    beginDrag(props) {\n        return {\n            id: props.id\n        }\n    },\n    endDrag(props, monitor) {\n        const droppedId = monitor.getItem().id\n\n        if (!monitor.didDrop()) {\n            props.moveCard(droppedId, droppedId)\n        }\n    }\n}\n\nconst box = {\n    canDrop() {\n        return false\n    },\n    hover(props, monitor) {\n        const draggedId = monitor.getItem().id\n        const overId = props.id\n        \n        if (draggedId !== overId) {\n            console.log(\"Over new card\");\n            console.log(\"original id:\", draggedId);\n            console.log(\"new id:\", overId);\n            props.moveCard(draggedId, overId)\n        }\n    }\n}\n\nconst collectDrag = (connect, monitor) =>{\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nconst collectDrop = (connect, monitor) => {\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nclass Card extends Component {\n\n    render() {\n        const { isDragging, connectDragSource, connectDropTarget} = this.props\n        let className = styles.Card\n        if(isDragging){\n            className=styles.CardDragging\n        }\n        return connectDragSource(\n            connectDropTarget(\n                <div className={className}>\n                    {this.props.cardName}\n                </div>\n            )\n        )\n    }\n}\n\nexport default flow(\n    DragSource(Types.ITEM, itemSource, collectDrag),\n    DropTarget(Types.ITEM, box, collectDrop)\n)(Card)"]},"metadata":{},"sourceType":"module"}