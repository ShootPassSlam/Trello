{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js\";\nimport * as React from 'react';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport styles from './Card.module.css';\nvar Types = {\n  ITEM: 'card'\n};\nvar cardSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      id: props.id,\n      originalIndex: props.findCard(props.id).index\n    };\n  },\n  endDrag: function endDrag(props, monitor) {\n    var _monitor$getItem = monitor.getItem(),\n        droppedId = _monitor$getItem.id,\n        originalIndex = _monitor$getItem.originalIndex;\n\n    var didDrop = monitor.didDrop();\n    var currentList = props.listId;\n\n    if (!didDrop) {\n      props.moveCard(currentList, droppedId, originalIndex);\n    }\n  }\n};\nvar cardTarget = {\n  canDrop: function canDrop() {\n    return false;\n  },\n  hover: function hover(props, monitor) {\n    var _monitor$getItem2 = monitor.getItem(),\n        draggedId = _monitor$getItem2.id;\n\n    var overId = props.id;\n    var currentList = props.listId;\n    console.log(\"d\", draggedId);\n    console.log(\"o\", overId);\n\n    if (draggedId !== overId) {\n      console.log(\"in here\");\n\n      var _props$findCard = props.findCard(overId),\n          overIndex = _props$findCard.index;\n\n      props.moveCard(currentList, draggedId, overIndex);\n    }\n  }\n};\n\nvar collectDrop = function collectDrop(connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nvar collectDrag = function collectDrag(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n};\n\nvar Card =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isDragging = _this$props.isDragging,\n          connectDragSource = _this$props.connectDragSource,\n          connectDropTarget = _this$props.connectDropTarget;\n      var className = styles.Card;\n\n      if (isDragging) {\n        className = styles.CardDragging;\n      }\n\n      return connectDragSource(connectDropTarget(React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, this.props.cardName)));\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(DragSource(Types.ITEM, cardSource, collectDrag)(Card));","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js"],"names":["React","DragSource","DropTarget","styles","Types","ITEM","cardSource","beginDrag","props","id","originalIndex","findCard","index","endDrag","monitor","getItem","droppedId","didDrop","currentList","listId","moveCard","cardTarget","canDrop","hover","draggedId","overId","console","log","overIndex","collectDrop","connect","connectDropTarget","dropTarget","collectDrag","connectDragSource","dragSource","isDragging","Card","className","CardDragging","cardName","Component"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { DragSource, DropTarget } from 'react-dnd'\nimport styles from './Card.module.css';\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst cardSource = {\n    beginDrag(props) {\n        return {\n            id: props.id,\n            originalIndex: props.findCard(props.id).index,\n        }\n    },\n\n    endDrag(props, monitor) {\n        const { id: droppedId, originalIndex } = monitor.getItem()\n        const didDrop = monitor.didDrop()\n        const currentList = props.listId\n        \n        if (!didDrop) {\n            props.moveCard(currentList, droppedId, originalIndex)\n        }\n    },\n}\n\nconst cardTarget = {\n    canDrop() {\n        return false\n    },\n\n    hover(props, monitor) {\n        const { id: draggedId } = monitor.getItem()\n        const { id: overId } = props\n        const currentList = props.listId\n        console.log(\"d\", draggedId)\n        console.log(\"o\", overId)\n\n        if (draggedId !== overId) {\n            console.log(\"in here\")\n            const { index: overIndex } = props.findCard(overId)\n            props.moveCard(currentList, draggedId, overIndex)\n        }\n    },\n}\n\nconst collectDrop = (connect) => {\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nconst collectDrag = (connect, monitor) =>{\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nclass Card extends React.Component{\n    render() {\n        const { isDragging, connectDragSource, connectDropTarget} = this.props\n        let className = styles.Card\n        if(isDragging){\n            className=styles.CardDragging\n        }\n        return connectDragSource(\n            connectDropTarget(\n                <div className={className}>\n                    {this.props.cardName}\n                </div>\n            )\n        )\n    }\n}\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(DragSource(Types.ITEM, cardSource, collectDrag)(Card))"]},"metadata":{},"sourceType":"module"}