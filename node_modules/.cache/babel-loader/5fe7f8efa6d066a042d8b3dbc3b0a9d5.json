{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js\";\nimport React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport styles from './Card.module.css';\nimport flow from 'lodash/flow';\nimport { DragSource, DropTarget } from 'react-dnd'; // import { XYCoord } from 'dnd-core'\n\nvar Types = {\n  ITEM: 'card'\n};\nvar itemSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      id: props.id\n    };\n  }\n};\nvar itemTarget = {\n  hover: function hover(props, monitor, component) {\n    if (!component) {\n      return null;\n    }\n\n    var dragIndex = monitor.getItem().index;\n    var hoverIndex = props.index; // Don't replace items with themselves\n\n    if (dragIndex === hoverIndex) {\n      return;\n    } // Determine rectangle on screen\n\n\n    var hoverBoundingRect = findDOMNode(component).getBoundingClientRect(); // Get vertical middle\n\n    var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n    var clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n    var hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n    // When dragging downwards, only move when the cursor is below 50%\n    // When dragging upwards, only move when the cursor is above 50%\n    // Dragging downwards\n\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      return;\n    } // Dragging upwards\n\n\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      return;\n    } // Time to actually perform the action\n\n\n    moveCard(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n\n    monitor.getItem().index = hoverIndex;\n  }\n};\n\nvar collectDrag = function collectDrag(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n};\n\nvar collectDrop = function collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nvar Card =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Card, _Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isDragging = _this$props.isDragging,\n          connectDragSource = _this$props.connectDragSource,\n          connectDropTarget = _this$props.connectDropTarget;\n      var className = styles.Card;\n\n      if (isDragging) {\n        className = styles.CardDragging;\n      }\n\n      return connectDragSource(connectDropTarget(React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.props.cardName)));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\nexport default flow(DragSource(Types.ITEM, itemSource, collectDrag), DropTarget(Types.ITEM, itemTarget, collectDrop))(Card);","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js"],"names":["React","Component","findDOMNode","styles","flow","DragSource","DropTarget","Types","ITEM","itemSource","beginDrag","props","id","itemTarget","hover","monitor","component","dragIndex","getItem","index","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","moveCard","collectDrag","connect","connectDragSource","dragSource","isDragging","collectDrop","connectDropTarget","dropTarget","Card","className","CardDragging","cardName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport styles from './Card.module.css';\nimport flow from 'lodash/flow';\n\nimport { DragSource, DropTarget } from 'react-dnd'\n// import { XYCoord } from 'dnd-core'\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst itemSource = {\n    beginDrag(props) {\n        return {\n            id: props.id\n        }\n    },\n}\n\nconst itemTarget = {\n    hover(props, monitor, component) {\n        if (!component) {\n            return null\n        }\n        const dragIndex = monitor.getItem().index\n        const hoverIndex = props.index\n\n        // Don't replace items with themselves\n        if (dragIndex === hoverIndex) {\n            return\n        }\n        \n        // Determine rectangle on screen\n        const hoverBoundingRect = (findDOMNode(component)).getBoundingClientRect()\n\n        // Get vertical middle\n        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n\n        // Determine mouse position\n        const clientOffset = monitor.getClientOffset()\n\n        // Get pixels to the top\n        const hoverClientY = (clientOffset).y - hoverBoundingRect.top\n\n        // Only perform the move when the mouse has crossed half of the items height\n        // When dragging downwards, only move when the cursor is below 50%\n        // When dragging upwards, only move when the cursor is above 50%\n\n        // Dragging downwards\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n            return\n        }\n\n        // Dragging upwards\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n            return\n        }\n\n        // Time to actually perform the action\n        moveCard(dragIndex, hoverIndex)\n\n        // Note: we're mutating the monitor item here!\n        // Generally it's better to avoid mutations,\n        // but it's good here for the sake of performance\n        // to avoid expensive index searches.\n        monitor.getItem().index = hoverIndex\n    },\n}\n\nconst collectDrag = (connect, monitor) =>{\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nconst collectDrop = (connect, monitor) => {\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nclass Card extends Component {\n\n    render() {\n        const { isDragging, connectDragSource, connectDropTarget} = this.props\n        let className = styles.Card\n        if(isDragging){\n            className=styles.CardDragging\n        }\n        return connectDragSource(\n            connectDropTarget(\n                <div className={className}>\n                    {this.props.cardName}\n                </div>\n            )\n        )\n    }\n}\n\nexport default flow(\n    DragSource(Types.ITEM, itemSource, collectDrag),\n    DropTarget(Types.ITEM, itemTarget, collectDrop)\n)(Card)"]},"metadata":{},"sourceType":"module"}