{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js\";\nimport React, { Component } from 'react';\nimport styles from './Card.module.css';\nimport flow from 'lodash/flow';\nimport { DragSource, DropTarget } from 'react-dnd';\nvar Types = {\n  ITEM: 'toy'\n};\nvar itemSource = {\n  beginDrag: function beginDrag(props) {\n    return {};\n  },\n  endDrag: function endDrag(props, monitor, component) {\n    if (!monitor.didDrop()) {\n      return;\n    }\n\n    var moveCardToList = props.moveCardToList;\n    var cardName = props.cardName;\n    var currentList = props.currentList;\n    var droppedList = monitor.getDropResult().droppedList;\n\n    if (currentList !== droppedList) {\n      moveCardToList(cardName, currentList, droppedList);\n    }\n  }\n};\nvar box = {\n  drop: function drop(props, monitor, component) {\n    if (!component) {\n      return;\n    }\n\n    var droppedList = props.droppedList;\n    return {\n      droppedList: droppedList\n    };\n  }\n};\n\nvar collectDrag = function collectDrag(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n    monitor: monitor\n  };\n};\n\nvar collectDrop = function collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOverCurrent: monitor.isOver({\n      shallow: true\n    })\n  };\n};\n\nvar Card =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Card, _Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          isDragging = _this$props.isDragging,\n          connectDragSource = _this$props.connectDragSource,\n          connectDropTarget = _this$props.connectDropTarget,\n          isOverCurrent = _this$props.isOverCurrent,\n          monitor = _this$props.monitor;\n      var className = styles.Card;\n\n      if (isDragging) {\n        className = styles.CardDragging;\n      }\n\n      if (isOverCurrent) {\n        //     console.log(\"this droppable card:\", this.droppableCard);\n        className = styles.CardDrop;\n        console.log(\"drop results:\", monitor.getDropResult());\n        console.log(\"getInitialClientOffset:\", monitor.getInitialClientOffset());\n        console.log(\"getInitialSourceClientOffset:\", monitor.getInitialSourceClientOffset());\n        console.log(\"getClientOffset:\", monitor.getClientOffset());\n        console.log(\"getDifferenceFromInitialOffset:\", monitor.getDifferenceFromInitialOffset());\n        console.log(\"getClientOffset:\", monitor.getClientOffset());\n      }\n\n      return connectDragSource(connectDropTarget(React.createElement(\"div\", {\n        className: className,\n        ref: function ref(node) {\n          _this.droppableCard = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, this.props.cardName)));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\nexport default flow(DragSource(Types.ITEM, itemSource, collectDrag), DropTarget(Types.ITEM, box, collectDrop))(Card);","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js"],"names":["React","Component","styles","flow","DragSource","DropTarget","Types","ITEM","itemSource","beginDrag","props","endDrag","monitor","component","didDrop","moveCardToList","cardName","currentList","droppedList","getDropResult","box","drop","collectDrag","connect","connectDragSource","dragSource","isDragging","collectDrop","connectDropTarget","dropTarget","isOverCurrent","isOver","shallow","Card","className","CardDragging","CardDrop","console","log","getInitialClientOffset","getInitialSourceClientOffset","getClientOffset","getDifferenceFromInitialOffset","node","droppableCard"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styles from './Card.module.css';\nimport flow from 'lodash/flow';\n\nimport { DragSource, DropTarget } from 'react-dnd'\n\nconst Types = {\n    ITEM: 'toy'\n}\n\n\nconst itemSource = {\n    beginDrag(props) {\n        return {};\n    },\n    endDrag(props, monitor, component) {\n        if (!monitor.didDrop()) {\n            return;\n        }\n        const { moveCardToList } = props;\n        const cardName = props.cardName;\n        const currentList = props.currentList;\n        const droppedList = monitor.getDropResult().droppedList;\n        if(currentList !== droppedList){\n            moveCardToList(cardName, currentList, droppedList);\n        }\n    }\n}\n\nconst box = {\n    drop( props, monitor, component: React.Component | null) {\n        if (!component) {\n            return\n        }\n        \n        const droppedList = props.droppedList;\n        return ({\n            droppedList\n        });\n\n    }\n}\n\nconst collectDrag = (connect, monitor) =>{\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n        monitor: monitor\n    }\n}\n\nconst collectDrop = (connect, monitor) => {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOverCurrent: monitor.isOver({ shallow: true })\n    }\n}\n\nclass Card extends Component {\n\n    render() {\n        const { isDragging, connectDragSource, connectDropTarget, isOverCurrent, monitor} = this.props\n        let className = styles.Card\n        if(isDragging){\n            className=styles.CardDragging\n        }\n        if(isOverCurrent){\n        //     console.log(\"this droppable card:\", this.droppableCard);\n            className=styles.CardDrop\n            console.log(\"drop results:\", monitor.getDropResult());\n            console.log(\"getInitialClientOffset:\", monitor.getInitialClientOffset());\n            console.log(\"getInitialSourceClientOffset:\", monitor.getInitialSourceClientOffset());\n            console.log(\"getClientOffset:\", monitor.getClientOffset());\n            console.log(\"getDifferenceFromInitialOffset:\", monitor.getDifferenceFromInitialOffset());\n            console.log(\"getClientOffset:\", monitor.getClientOffset());\n\n        }\n        return connectDragSource(connectDropTarget(\n            <div className={className} ref={node => { this.droppableCard = node; }} >\n                {this.props.cardName}\n            </div>\n        ))\n    }\n}\n\nexport default flow(\n    DragSource(Types.ITEM, itemSource, collectDrag),\n    DropTarget(Types.ITEM, box, collectDrop)\n)(Card)"]},"metadata":{},"sourceType":"module"}