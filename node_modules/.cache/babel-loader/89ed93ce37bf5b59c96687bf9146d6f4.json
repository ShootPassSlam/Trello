{"ast":null,"code":"import _slicedToArray from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js\";\nimport * as React from 'react';\nimport { DropTarget } from 'react-dnd';\nimport Card from '../../components/Card/Card';\nimport InputCard from '../InputCard/InputCard';\nimport styles from './List.module.css';\nimport { connect } from 'react-redux';\nimport * as listActions from '../../store/actions/lists';\nvar Types = {\n  ITEM: 'card'\n};\nvar cardTarget = {\n  drop: function drop() {}\n};\n\nvar collectDrop = function collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nvar Container =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Container, _React$Component);\n\n  function Container() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Container)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.moveCard = function (originalListId, id, atIndex) {\n      var _this$findCard = _this.findCard(id),\n          card = _this$findCard.card,\n          index = _this$findCard.index;\n\n      var newListId = _this.findList(id);\n\n      console.log(newListId);\n\n      _this.props.onCardMovedInList(newListId, originalListId, index, atIndex, card);\n    };\n\n    _this.findCard = function (id) {\n      var cards = _this.props.cards;\n      var card = cards.filter(function (c) {\n        return \"\".concat(c.id) === id;\n      })[0];\n      return {\n        card: card,\n        index: cards.indexOf(card)\n      };\n    };\n\n    _this.findList = function (id) {\n      var _this$props = _this.props,\n          lists = _this$props.lists,\n          cards = _this$props.cards;\n      var card = cards.filter(function (c) {\n        return \"\".concat(c.id) === id;\n      })[0];\n      console.log(\"WE GOT A CARD???\", card);\n\n      var _arr = Object.entries(lists);\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var _ref3 = _arr[_i];\n\n        var _ref2 = _slicedToArray(_ref3, 2);\n\n        var key = _ref2[0];\n        var value = _ref2[1];\n\n        for (var currentCard in value.cards) {\n          if (value.cards[currentCard] === card) {\n            console.log(\"DID WE MAKE IT THROUGH??\");\n            console.log(key);\n            return key;\n          }\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var connectDropTarget = this.props.connectDropTarget;\n      var cards = this.props.cards;\n      var displayCards = null;\n\n      if (cards) {\n        displayCards = cards.map(function (card) {\n          return React.createElement(Card, {\n            key: card.id,\n            id: \"\".concat(card.id),\n            text: card.text,\n            listId: _this2.props.listId,\n            moveCard: _this2.moveCard,\n            findCard: _this2.findCard,\n            findList: _this2.findList,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          });\n        });\n      }\n\n      return connectDropTarget(React.createElement(\"div\", {\n        className: styles.List,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, this.props.listName), displayCards, React.createElement(InputCard, {\n        createNewCard: this.props.onCardAdded,\n        cards: this.props.cards,\n        listId: this.props.listId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Container;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onCardAdded: function onCardAdded(cardName, cards, listId) {\n      return dispatch(listActions.addCard(cardName, cards, listId));\n    },\n    onCardMovedInList: function onCardMovedInList(newListId, originalListId, currentIndex, newIndex, card) {\n      return dispatch(listActions.moveCardInList(newListId, originalListId, currentIndex, newIndex, card));\n    }\n  };\n};\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(connect(null, mapDispatchToProps)(Container));","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js"],"names":["React","DropTarget","Card","InputCard","styles","connect","listActions","Types","ITEM","cardTarget","drop","collectDrop","monitor","connectDropTarget","dropTarget","Container","moveCard","originalListId","id","atIndex","findCard","card","index","newListId","findList","console","log","props","onCardMovedInList","cards","filter","c","indexOf","lists","Object","entries","key","value","currentCard","displayCards","map","text","listId","List","listName","onCardAdded","Component","mapDispatchToProps","dispatch","cardName","addCard","currentIndex","newIndex","moveCardInList"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,WAAZ,MAA6B,2BAA7B;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,IAAI,EAAE;AADI,CAAd;AAIA,IAAMC,UAAU,GAAG;AACfC,EAAAA,IADe,kBACR,CAAE;AADM,CAAnB;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACN,OAAD,EAAUO,OAAV,EAAqB;AACrC,SAAO;AACHC,IAAAA,iBAAiB,EAAER,OAAO,CAACS,UAAR;AADhB,GAAP;AAGH,CAJD;;IAMMC,S;;;;;;;;;;;;;;;;;;UA8BFC,Q,GAAW,UAACC,cAAD,EAAiBC,EAAjB,EAAqBC,OAArB,EAAiC;AAAA,2BAChB,MAAKC,QAAL,CAAcF,EAAd,CADgB;AAAA,UAChCG,IADgC,kBAChCA,IADgC;AAAA,UAC1BC,KAD0B,kBAC1BA,KAD0B;;AAExC,UAAMC,SAAS,GAAG,MAAKC,QAAL,CAAcN,EAAd,CAAlB;;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;;AACA,YAAKI,KAAL,CAAWC,iBAAX,CAA6BL,SAA7B,EAAwCN,cAAxC,EAAwDK,KAAxD,EAA+DH,OAA/D,EAAwEE,IAAxE;AACH,K;;UAEDD,Q,GAAW,UAACF,EAAD,EAAQ;AAAA,UACPW,KADO,GACG,MAAKF,KADR,CACPE,KADO;AAEf,UAAMR,IAAI,GAAGQ,KAAK,CAACC,MAAN,CAAa,UAAAC,CAAC;AAAA,eAAI,UAAGA,CAAC,CAACb,EAAL,MAAcA,EAAlB;AAAA,OAAd,EAAoC,CAApC,CAAb;AAEA,aAAO;AACHG,QAAAA,IAAI,EAAJA,IADG;AAEHC,QAAAA,KAAK,EAAEO,KAAK,CAACG,OAAN,CAAcX,IAAd;AAFJ,OAAP;AAIH,K;;UAEDG,Q,GAAW,UAACN,EAAD,EAAQ;AAAA,wBACU,MAAKS,KADf;AAAA,UACPM,KADO,eACPA,KADO;AAAA,UACAJ,KADA,eACAA,KADA;AAEf,UAAMR,IAAI,GAAGQ,KAAK,CAACC,MAAN,CAAa,UAAAC,CAAC;AAAA,eAAI,UAAGA,CAAC,CAACb,EAAL,MAAcA,EAAlB;AAAA,OAAd,EAAoC,CAApC,CAAb;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCL,IAAhC;;AAHe,iBAKYa,MAAM,CAACC,OAAP,CAAeF,KAAf,CALZ;;AAKf,+CAAkD;AAAA;;AAAA;;AAAA,YAAtCG,GAAsC;AAAA,YAAjCC,KAAiC;;AAC9C,aAAM,IAAMC,WAAZ,IAA2BD,KAAK,CAACR,KAAjC,EAAwC;AACpC,cAAGQ,KAAK,CAACR,KAAN,CAAYS,WAAZ,MAA2BjB,IAA9B,EAAmC;AAC/BI,YAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACA,mBAAOA,GAAP;AACH;AACJ;AACJ;AAEJ,K;;;;;;;6BA7DQ;AAAA;;AAAA,UACGvB,iBADH,GACyB,KAAKc,KAD9B,CACGd,iBADH;AAAA,UAEGgB,KAFH,GAEa,KAAKF,KAFlB,CAEGE,KAFH;AAGL,UAAIU,YAAY,GAAG,IAAnB;;AACA,UAAGV,KAAH,EAAS;AACLU,QAAAA,YAAY,GAAGV,KAAK,CAACW,GAAN,CAAU,UAAAnB,IAAI,EAAI;AAC7B,iBAAO,oBAAC,IAAD;AACH,YAAA,GAAG,EAAEA,IAAI,CAACH,EADP;AAEH,YAAA,EAAE,YAAKG,IAAI,CAACH,EAAV,CAFC;AAGH,YAAA,IAAI,EAAEG,IAAI,CAACoB,IAHR;AAIH,YAAA,MAAM,EAAE,MAAI,CAACd,KAAL,CAAWe,MAJhB;AAKH,YAAA,QAAQ,EAAE,MAAI,CAAC1B,QALZ;AAMH,YAAA,QAAQ,EAAE,MAAI,CAACI,QANZ;AAOH,YAAA,QAAQ,EAAE,MAAI,CAACI,QAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AASH,SAVc,CAAf;AAWH;;AAED,aAAOX,iBAAiB,CACpB;AAAK,QAAA,SAAS,EAAET,MAAM,CAACuC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKhB,KAAL,CAAWiB,QAAhB,CADJ,EAEKL,YAFL,EAGI,oBAAC,SAAD;AAAW,QAAA,aAAa,EAAE,KAAKZ,KAAL,CAAWkB,WAArC;AACI,QAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWE,KADtB;AAEI,QAAA,MAAM,EAAE,KAAKF,KAAL,CAAWe,MAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CADoB,CAAxB;AASH;;;;EA5BmB1C,KAAK,CAAC8C,S;;AAiE9B,IAAMC,kBAAkB,GAAE,SAApBA,kBAAoB,CAAAC,QAAQ,EAAI;AAClC,SAAO;AACHH,IAAAA,WAAW,EAAE,qBAACI,QAAD,EAAWpB,KAAX,EAAkBa,MAAlB;AAAA,aAA6BM,QAAQ,CAAC1C,WAAW,CAAC4C,OAAZ,CAAoBD,QAApB,EAA8BpB,KAA9B,EAAqCa,MAArC,CAAD,CAArC;AAAA,KADV;AAEHd,IAAAA,iBAAiB,EAAE,2BAACL,SAAD,EAAYN,cAAZ,EAA4BkC,YAA5B,EAA0CC,QAA1C,EAAoD/B,IAApD;AAAA,aAA6D2B,QAAQ,CAAC1C,WAAW,CAAC+C,cAAZ,CAA2B9B,SAA3B,EAAsCN,cAAtC,EAAsDkC,YAAtD,EAAoEC,QAApE,EAA8E/B,IAA9E,CAAD,CAArE;AAAA;AAFhB,GAAP;AAKH,CAND;;AAQA,eAAepB,UAAU,CAACM,KAAK,CAACC,IAAP,EAAaC,UAAb,EAAyBE,WAAzB,CAAV,CAAgDN,OAAO,CAAC,IAAD,EAAO0C,kBAAP,CAAP,CAAkChC,SAAlC,CAAhD,CAAf","sourcesContent":["import * as React from 'react'\nimport { DropTarget } from 'react-dnd'\nimport Card from '../../components/Card/Card'\nimport InputCard from '../InputCard/InputCard';\nimport styles from './List.module.css';\n\nimport { connect } from 'react-redux';\nimport * as listActions from '../../store/actions/lists';\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst cardTarget = {\n    drop() {}\n}\n\nconst collectDrop = (connect, monitor) =>{\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nclass Container extends React.Component{\n    render() {\n        const { connectDropTarget } = this.props\n        const { cards } = this.props\n        let displayCards = null\n        if(cards){\n            displayCards = cards.map(card => {\n                return <Card\n                    key={card.id}\n                    id={`${card.id}`}\n                    text={card.text}\n                    listId={this.props.listId}\n                    moveCard={this.moveCard}\n                    findCard={this.findCard}\n                    findList={this.findList}\n                />;\n            })\n        }\n\n        return connectDropTarget(\n            <div className={styles.List}>\n                <h4>{this.props.listName}</h4>\n                {displayCards}\n                <InputCard createNewCard={this.props.onCardAdded} \n                    cards={this.props.cards} \n                    listId={this.props.listId}/>\n            </div>\n        )\n    }\n\n    moveCard = (originalListId, id, atIndex) => {\n        const { card, index } = this.findCard(id)\n        const newListId = this.findList(id)\n        console.log(newListId)\n        this.props.onCardMovedInList(newListId, originalListId, index, atIndex, card);\n    }\n\n    findCard = (id) => {\n        const { cards } = this.props\n        const card = cards.filter(c => `${c.id}` === id)[0]\n\n        return {\n            card,\n            index: cards.indexOf(card),\n        }\n    }\n\n    findList = (id) => {\n        const { lists, cards } = this.props\n        const card = cards.filter(c => `${c.id}` === id)[0]\n        console.log(\"WE GOT A CARD???\", card)\n\n        for (const [key, value] of Object.entries(lists)) {\n            for ( const currentCard in value.cards) {\n                if(value.cards[currentCard]===card){\n                    console.log(\"DID WE MAKE IT THROUGH??\")\n                    console.log(key)\n                    return key\n                }\n            }\n        }\n        \n    }\n}\n\nconst mapDispatchToProps= dispatch => {\n    return {\n        onCardAdded: (cardName, cards, listId) => dispatch(listActions.addCard(cardName, cards, listId)),\n        onCardMovedInList: (newListId, originalListId, currentIndex, newIndex, card) => dispatch(listActions.moveCardInList(newListId, originalListId, currentIndex, newIndex, card))\n\n    }\n}\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(connect(null, mapDispatchToProps)(Container))"]},"metadata":{},"sourceType":"module"}