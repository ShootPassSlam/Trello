{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js\";\nimport * as React from 'react';\nimport { DropTarget } from 'react-dnd';\nimport Card from '../../components/Card/Card';\nimport InputCard from '../InputCard/InputCard';\nimport styles from './List.module.css';\nimport { connect } from 'react-redux';\nimport * as listActions from '../../store/actions/lists';\nvar Types = {\n  ITEM: 'card'\n};\nvar cardTarget = {\n  drop: function drop() {}\n};\n\nvar collectDrop = function collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nvar Container =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Container, _React$Component);\n\n  function Container() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Container)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.findCard = function (id) {\n      var card = [];\n\n      for (var key in _this.props.lists) {\n        // console.log(\"list\", this.props.lists[key])\n        card.push(_this.props.lists[key].cards.filter(function (c) {\n          return \"\".concat(c.id) === id;\n        })[0]);\n      }\n\n      console.log(card);\n      var cards = _this.props.cards;\n      card = cards.filter(function (c) {\n        return \"\".concat(c.id) === id;\n      })[0];\n\n      if (!card) {\n        card = cards[cards.length - 1];\n      }\n\n      return {\n        card: card,\n        index: cards.indexOf(card)\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var connectDropTarget = this.props.connectDropTarget;\n      var cards = this.props.cards;\n      var displayCards = null;\n\n      if (cards) {\n        displayCards = cards.map(function (card) {\n          return React.createElement(Card, {\n            key: card.id,\n            id: \"\".concat(card.id),\n            text: card.text,\n            index: cards.indexOf(card),\n            listId: _this2.props.listId,\n            moveCard: _this2.props.onCardMovedInList,\n            findCard: _this2.findCard,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          });\n        });\n      }\n\n      return connectDropTarget(React.createElement(\"div\", {\n        className: styles.List,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, this.props.listName), displayCards, React.createElement(InputCard, {\n        createNewCard: this.props.onCardAdded,\n        cards: this.props.cards,\n        listId: this.props.listId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })));\n    } // moveCard = (originalListId, id, atIndex) => {\n    //     const { card, index } = this.findCard(id, originalListId)\n    //     const newListId = this.findList(id, originalListId)\n    //     console.log(\"WHAT WE ARE SENDING TO ON MOVE CARD:\")\n    //     console.log('ORIGINAL LIST:', originalListId)\n    //     console.log('NEW LIST:', newListId)\n    //     console.log(\"ORIGINAL INDEX:\", index)\n    //     console.log(\"NEW INDEX:\", atIndex)\n    //     console.log(\"CARD:\", card)\n    //     this.props.onCardMovedInList(newListId, originalListId, index, atIndex, card);\n    // }\n    // findList = (id, list) => {\n    //     const { cards } = this.props.lists[list]\n    //     let card = cards.filter(c => `${c.id}` === id)[0]\n    //     if(!card){\n    //         card = cards[cards.length-1]\n    //     }\n    //     for (const [key, value] of Object.entries(this.props.lists)) {\n    //         for ( const currentCard in value.cards) {\n    //             if(value.cards[currentCard]===card){\n    //                 return key;\n    //             }\n    //         }\n    //     }\n    // }\n\n  }]);\n\n  return Container;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onCardAdded: function onCardAdded(cardName, cards, listId) {\n      return dispatch(listActions.addCard(cardName, cards, listId));\n    },\n    onCardMovedInList: function onCardMovedInList(newListId, originalListId, currentIndex, newIndex, card) {\n      return dispatch(listActions.moveCardInList(newListId, originalListId, currentIndex, newIndex, card));\n    }\n  };\n};\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(connect(null, mapDispatchToProps)(Container));","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js"],"names":["React","DropTarget","Card","InputCard","styles","connect","listActions","Types","ITEM","cardTarget","drop","collectDrop","monitor","connectDropTarget","dropTarget","Container","findCard","id","card","key","props","lists","push","cards","filter","c","console","log","length","index","indexOf","displayCards","map","text","listId","onCardMovedInList","List","listName","onCardAdded","Component","mapDispatchToProps","dispatch","cardName","addCard","newListId","originalListId","currentIndex","newIndex","moveCardInList"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { DropTarget } from 'react-dnd'\nimport Card from '../../components/Card/Card'\nimport InputCard from '../InputCard/InputCard';\nimport styles from './List.module.css';\n\nimport { connect } from 'react-redux';\nimport * as listActions from '../../store/actions/lists';\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst cardTarget = {\n    drop() {}\n}\n\nconst collectDrop = (connect, monitor) =>{\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nclass Container extends React.Component{\n    render() {\n        const { connectDropTarget } = this.props\n        const { cards } = this.props\n        let displayCards = null\n        if(cards){\n            displayCards = cards.map(card => {\n                return <Card\n                    key={card.id}\n                    id={`${card.id}`}\n                    text={card.text}\n                    index={cards.indexOf(card)}\n                    listId={this.props.listId}\n                    moveCard={this.props.onCardMovedInList}\n                    findCard={this.findCard}\n                />;\n            })\n        }\n\n        return connectDropTarget(\n            <div className={styles.List}>\n                <h4>{this.props.listName}</h4>\n                {displayCards}\n                <InputCard createNewCard={this.props.onCardAdded} \n                    cards={this.props.cards} \n                    listId={this.props.listId}/>\n            </div>\n        )\n    }\n\n    // moveCard = (originalListId, id, atIndex) => {\n    //     const { card, index } = this.findCard(id, originalListId)\n    //     const newListId = this.findList(id, originalListId)\n    //     console.log(\"WHAT WE ARE SENDING TO ON MOVE CARD:\")\n    //     console.log('ORIGINAL LIST:', originalListId)\n    //     console.log('NEW LIST:', newListId)\n    //     console.log(\"ORIGINAL INDEX:\", index)\n    //     console.log(\"NEW INDEX:\", atIndex)\n    //     console.log(\"CARD:\", card)\n    //     this.props.onCardMovedInList(newListId, originalListId, index, atIndex, card);\n    // }\n\n    findCard = (id) => {\n        let card = []\n        for (var key in this.props.lists){\n            // console.log(\"list\", this.props.lists[key])\n            card.push(this.props.lists[key].cards.filter(c => `${c.id}` === id)[0])\n        }\n        console.log(card)\n        const { cards } = this.props\n        card = cards.filter(c => `${c.id}` === id)[0]\n        if(!card){\n            card = cards[cards.length-1]\n        }\n        return {\n            card,\n            index: cards.indexOf(card),\n        }\n    }\n\n    // findList = (id, list) => {\n    //     const { cards } = this.props.lists[list]\n    //     let card = cards.filter(c => `${c.id}` === id)[0]\n    //     if(!card){\n    //         card = cards[cards.length-1]\n    //     }\n\n    //     for (const [key, value] of Object.entries(this.props.lists)) {\n    //         for ( const currentCard in value.cards) {\n    //             if(value.cards[currentCard]===card){\n    //                 return key;\n    //             }\n    //         }\n    //     }\n    // }\n}\n\nconst mapDispatchToProps= dispatch => {\n    return {\n        onCardAdded: (cardName, cards, listId) => dispatch(listActions.addCard(cardName, cards, listId)),\n        onCardMovedInList: (newListId, originalListId, currentIndex, newIndex, card) => dispatch(listActions.moveCardInList(newListId, originalListId, currentIndex, newIndex, card))\n\n    }\n}\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(connect(null, mapDispatchToProps)(Container))"]},"metadata":{},"sourceType":"module"}