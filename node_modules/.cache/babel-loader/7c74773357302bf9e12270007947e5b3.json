{"ast":null,"code":"import _objectSpread from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js\";\nimport * as React from 'react';\nimport { DragSource, DropTarget } from 'react-dnd';\nvar Types = {\n  ITEM: 'card'\n};\nvar style = {\n  border: '1px dashed gray',\n  padding: '0.5rem 1rem',\n  marginBottom: '.5rem',\n  backgroundColor: 'white',\n  cursor: 'move'\n};\nvar cardSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      id: props.id,\n      originalIndex: props.findCard(props.id).index\n    };\n  },\n  endDrag: function endDrag(props, monitor) {\n    var _monitor$getItem = monitor.getItem(),\n        droppedId = _monitor$getItem.id,\n        originalIndex = _monitor$getItem.originalIndex;\n\n    var didDrop = monitor.didDrop();\n\n    if (!didDrop) {\n      props.moveCard(droppedId, originalIndex);\n    }\n  }\n};\nvar cardTarget = {\n  canDrop: function canDrop() {\n    return false;\n  },\n  hover: function hover(props, monitor) {\n    var _monitor$getItem2 = monitor.getItem(),\n        draggedId = _monitor$getItem2.id;\n\n    var overId = props.id;\n\n    if (draggedId !== overId) {\n      var _props$findCard = props.findCard(overId),\n          overIndex = _props$findCard.index;\n\n      props.moveCard(draggedId, overIndex);\n    }\n  }\n};\n\nvar collectDrop = function collectDrop(connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nvar collectDrag = function collectDrag(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n};\n\nvar Card =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          text = _this$props.text,\n          isDragging = _this$props.isDragging,\n          connectDragSource = _this$props.connectDragSource,\n          connectDropTarget = _this$props.connectDropTarget;\n      var opacity = isDragging ? 0 : 1;\n      return connectDragSource(connectDropTarget(React.createElement(\"div\", {\n        style: _objectSpread({}, style, {\n          opacity: opacity\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, text)));\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(DragSource(Types.ITEM, cardSource, collectDrag)(Card)); // import styles from './Card.module.css';\n// const itemSource = {\n//     beginDrag(props) {\n//         return {\n//             id: props.id\n//         }\n//     },\n//     endDrag(props, monitor) {\n//         const droppedId = monitor.getItem().id\n//         if (!monitor.didDrop()) {\n//             props.moveCard(droppedId, droppedId)\n//         }\n//     }\n// }\n// const itemTarget = {\n//     canDrop() {\n//         return false\n//     },\n//     hover(props, monitor) {\n//         const draggedId = monitor.getItem().id\n//         const overId = props.id\n//         if (draggedId !== overId) {\n//             console.log(\"Over new card\");\n//             console.log(\"original id:\", draggedId);\n//             console.log(\"new id:\", overId);\n//             props.moveCard(draggedId, overId)\n//         }\n//     }\n// }\n// class Card extends Component {\n//     render() {\n//         const { isDragging, connectDragSource, connectDropTarget} = this.props\n//         let className = styles.Card\n//         if(isDragging){\n//             className=styles.CardDragging\n//         }\n//         return connectDragSource(\n//             connectDropTarget(\n//                 <div className={className}>\n//                     {this.props.cardName}\n//                 </div>\n//             )\n//         )\n//     }\n// }","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/components/Card/Card.js"],"names":["React","DragSource","DropTarget","Types","ITEM","style","border","padding","marginBottom","backgroundColor","cursor","cardSource","beginDrag","props","id","originalIndex","findCard","index","endDrag","monitor","getItem","droppedId","didDrop","moveCard","cardTarget","canDrop","hover","draggedId","overId","overIndex","collectDrop","connect","connectDropTarget","dropTarget","collectDrag","connectDragSource","dragSource","isDragging","Card","text","opacity","Component"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,WAAvC;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,IAAI,EAAE;AADI,CAAd;AAIA,IAAMC,KAAK,GAAG;AACVC,EAAAA,MAAM,EAAE,iBADE;AAEVC,EAAAA,OAAO,EAAE,aAFC;AAGVC,EAAAA,YAAY,EAAE,OAHJ;AAIVC,EAAAA,eAAe,EAAE,OAJP;AAKVC,EAAAA,MAAM,EAAE;AALE,CAAd;AAQA,IAAMC,UAAU,GAAG;AACfC,EAAAA,SADe,qBACLC,KADK,EACE;AACb,WAAO;AACHC,MAAAA,EAAE,EAAED,KAAK,CAACC,EADP;AAEHC,MAAAA,aAAa,EAAEF,KAAK,CAACG,QAAN,CAAeH,KAAK,CAACC,EAArB,EAAyBG;AAFrC,KAAP;AAIH,GANc;AAQfC,EAAAA,OARe,mBAQPL,KARO,EAQAM,OARA,EAQS;AAAA,2BACqBA,OAAO,CAACC,OAAR,EADrB;AAAA,QACRC,SADQ,oBACZP,EADY;AAAA,QACGC,aADH,oBACGA,aADH;;AAEpB,QAAMO,OAAO,GAAGH,OAAO,CAACG,OAAR,EAAhB;;AAEA,QAAI,CAACA,OAAL,EAAc;AACVT,MAAAA,KAAK,CAACU,QAAN,CAAeF,SAAf,EAA0BN,aAA1B;AACH;AACJ;AAfc,CAAnB;AAkBA,IAAMS,UAAU,GAAG;AACfC,EAAAA,OADe,qBACL;AACN,WAAO,KAAP;AACH,GAHc;AAKfC,EAAAA,KALe,iBAKTb,KALS,EAKFM,OALE,EAKO;AAAA,4BACQA,OAAO,CAACC,OAAR,EADR;AAAA,QACNO,SADM,qBACVb,EADU;;AAAA,QAENc,MAFM,GAEKf,KAFL,CAEVC,EAFU;;AAIlB,QAAIa,SAAS,KAAKC,MAAlB,EAA0B;AAAA,4BACOf,KAAK,CAACG,QAAN,CAAeY,MAAf,CADP;AAAA,UACPC,SADO,mBACdZ,KADc;;AAEtBJ,MAAAA,KAAK,CAACU,QAAN,CAAeI,SAAf,EAA0BE,SAA1B;AACH;AACJ;AAbc,CAAnB;;AAgBA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAa;AAC7B,SAAO;AACHC,IAAAA,iBAAiB,EAAED,OAAO,CAACE,UAAR;AADhB,GAAP;AAGH,CAJD;;AAMA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACH,OAAD,EAAUZ,OAAV,EAAqB;AACrC,SAAO;AACHgB,IAAAA,iBAAiB,EAAEJ,OAAO,CAACK,UAAR,EADhB;AAEHC,IAAAA,UAAU,EAAElB,OAAO,CAACkB,UAAR;AAFT,GAAP;AAIH,CALD;;IAOMC,I;;;;;;;;;;;;;6BACO;AAAA,wBAC8D,KAAKzB,KADnE;AAAA,UACG0B,IADH,eACGA,IADH;AAAA,UACSF,UADT,eACSA,UADT;AAAA,UACqBF,iBADrB,eACqBA,iBADrB;AAAA,UACwCH,iBADxC,eACwCA,iBADxC;AAEL,UAAMQ,OAAO,GAAGH,UAAU,GAAG,CAAH,GAAO,CAAjC;AAEA,aAAOF,iBAAiB,CACpBH,iBAAiB,CAAC;AAAK,QAAA,KAAK,oBAAO3B,KAAP;AAAcmC,UAAAA,OAAO,EAAPA;AAAd,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoCD,IAApC,CAAD,CADG,CAAxB;AAGH;;;;EARcvC,KAAK,CAACyC,S;;AAWzB,eAAevC,UAAU,CAACC,KAAK,CAACC,IAAP,EAAaoB,UAAb,EAAyBM,WAAzB,CAAV,CAAgD7B,UAAU,CAACE,KAAK,CAACC,IAAP,EAAaO,UAAb,EAAyBuB,WAAzB,CAAV,CAAgDI,IAAhD,CAAhD,CAAf,C,CAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import * as React from 'react'\nimport { DragSource, DropTarget } from 'react-dnd'\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst style = {\n    border: '1px dashed gray',\n    padding: '0.5rem 1rem',\n    marginBottom: '.5rem',\n    backgroundColor: 'white',\n    cursor: 'move',\n}\n\nconst cardSource = {\n    beginDrag(props) {\n        return {\n            id: props.id,\n            originalIndex: props.findCard(props.id).index,\n        }\n    },\n\n    endDrag(props, monitor) {\n        const { id: droppedId, originalIndex } = monitor.getItem()\n        const didDrop = monitor.didDrop()\n\n        if (!didDrop) {\n            props.moveCard(droppedId, originalIndex)\n        }\n    },\n}\n\nconst cardTarget = {\n    canDrop() {\n        return false\n    },\n\n    hover(props, monitor) {\n        const { id: draggedId } = monitor.getItem()\n        const { id: overId } = props\n\n        if (draggedId !== overId) {\n            const { index: overIndex } = props.findCard(overId)\n            props.moveCard(draggedId, overIndex)\n        }\n    },\n}\n\nconst collectDrop = (connect) => {\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nconst collectDrag = (connect, monitor) =>{\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nclass Card extends React.Component{\n    render() {\n        const { text, isDragging, connectDragSource, connectDropTarget,} = this.props\n        const opacity = isDragging ? 0 : 1\n\n        return connectDragSource(\n            connectDropTarget(<div style={{ ...style, opacity }}>{text}</div>),\n        )\n    }\n}\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(DragSource(Types.ITEM, cardSource, collectDrag)(Card))\n\n\n\n// import styles from './Card.module.css';\n\n// const itemSource = {\n//     beginDrag(props) {\n//         return {\n//             id: props.id\n//         }\n//     },\n//     endDrag(props, monitor) {\n//         const droppedId = monitor.getItem().id\n\n//         if (!monitor.didDrop()) {\n//             props.moveCard(droppedId, droppedId)\n//         }\n//     }\n// }\n\n// const itemTarget = {\n//     canDrop() {\n//         return false\n//     },\n//     hover(props, monitor) {\n//         const draggedId = monitor.getItem().id\n//         const overId = props.id\n        \n//         if (draggedId !== overId) {\n//             console.log(\"Over new card\");\n//             console.log(\"original id:\", draggedId);\n//             console.log(\"new id:\", overId);\n//             props.moveCard(draggedId, overId)\n//         }\n//     }\n// }\n\n\n// class Card extends Component {\n\n//     render() {\n//         const { isDragging, connectDragSource, connectDropTarget} = this.props\n//         let className = styles.Card\n//         if(isDragging){\n//             className=styles.CardDragging\n//         }\n//         return connectDragSource(\n//             connectDropTarget(\n//                 <div className={className}>\n//                     {this.props.cardName}\n//                 </div>\n//             )\n//         )\n//     }\n// }"]},"metadata":{},"sourceType":"module"}