{"ast":null,"code":"import _classCallCheck from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js\";\nimport * as React from 'react';\nimport { DropTarget, ConnectDropTarget } from 'react-dnd';\nimport Card from '../../Card/Card';\nvar Types = {\n  ITEM: 'card'\n};\n\nvar update = require('immutability-helper');\n\nvar style = {\n  width: 400\n};\nvar cardTarget = {\n  drop: function drop() {//\n  }\n};\n\nvar Container =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Container, _React$Component);\n\n  function Container() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Container)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      cards: [{\n        id: 1,\n        text: 'Write a cool JS library'\n      }, {\n        id: 2,\n        text: 'Make it generic enough'\n      }, {\n        id: 3,\n        text: 'Write README'\n      }, {\n        id: 4,\n        text: 'Create some examples'\n      }, {\n        id: 5,\n        text: 'Spam in Twitter and IRC to promote it'\n      }, {\n        id: 6,\n        text: '???'\n      }, {\n        id: 7,\n        text: 'PROFIT'\n      }]\n    };\n\n    _this.moveCard = function (id, atIndex) {\n      var _this$findCard = _this.findCard(id),\n          card = _this$findCard.card,\n          index = _this$findCard.index;\n\n      _this.setState(update(_this.state, {\n        cards: {\n          $splice: [[index, 1], [atIndex, 0, card]]\n        }\n      }));\n    };\n\n    _this.findCard = function (id) {\n      var cards = _this.state.cards;\n      var card = cards.filter(function (c) {\n        return \"\".concat(c.id) === id;\n      })[0];\n      return {\n        card: card,\n        index: cards.indexOf(card)\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var connectDropTarget = this.props.connectDropTarget;\n      var cards = this.state.cards;\n      return connectDropTarget(React.createElement(\"div\", {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, cards.map(function (card) {\n        return React.createElement(Card, {\n          key: card.id,\n          id: \"\".concat(card.id),\n          text: card.text,\n          moveCard: _this2.moveCard,\n          findCard: _this2.findCard,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return Container;\n}(React.Component);\n\nexport default DropTarget(Types.ITEM, cardTarget, function (connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n})(Container); // import React, { Component } from 'react';\n// import { connect } from 'react-redux';\n// import styles from './List.module.css';\n// import Card from '../../components/Card/Card';\n// import InputCard from '../InputCard/InputCard';\n// import * as listActions from '../../store/actions/lists';\n// class List extends Component {\n//     moveCard = (oldId, newId) => {\n//         const card = this.props.cards[oldId]\n//         console.log(\"in here\")\n//         this.props.onCardMovedInList(this.props.listName, card, oldId, newId);\n//     }\n//     render(){\n//         const displayCards = this.props.cards.map((cardName, index)=> {\n//             return (\n//                 <Card key={cardName+index}\n//                         id ={index}\n//                         cardName={cardName} \n//                         currentList={this.props.listName}\n//                         moveCard={this.moveCard}/>\n//             )\n//         })\n//         return(\n//             <div className={styles.List}>\n//                 <h4>{this.props.listName}</h4>\n//                 {displayCards}\n//                 <InputCard createNewCard={this.props.onCardAdded} \n//                             cards={this.props.cards} \n//                             list={this.props.listName}/>\n//             </div>\n//         );\n//     }\n// }\n// const mapDispatchToProps= dispatch => {\n//     return {\n//         onCardAdded: (cardName, listName) => dispatch(listActions.addCard(cardName, listName)),\n//         onCardMovedInList: (listName, cardName, currentIndex, newIndex) => dispatch(listActions.moveCardInList(listName, cardName, currentIndex, newIndex))\n//         // onCardMovedBetweenLists: (cardName, currentList, droppedList) => dispatch(listActions.moveCard(cardName, currentList, droppedList)),\n//     }\n// }\n// export default connect(null, mapDispatchToProps)(List);","map":{"version":3,"sources":["/Users/dominicscotto/Desktop/Portfolio/react_rest/trello/src/containers/List/List.js"],"names":["React","DropTarget","ConnectDropTarget","Card","Types","ITEM","update","require","style","width","cardTarget","drop","Container","state","cards","id","text","moveCard","atIndex","findCard","card","index","setState","$splice","filter","c","indexOf","connectDropTarget","props","map","Component","connect","dropTarget"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { DropTarget, ConnectDropTarget } from 'react-dnd'\nimport Card from '../../Card/Card'\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst update = require('immutability-helper')\n\nconst style = {\n    width: 400,\n}\n\nconst cardTarget = {\n    drop() {\n        //\n    },\n}\n\nexport interface ContainerProps {\n    connectDropTarget: ConnectDropTarget\n}\n\nexport interface ContainerState {\n    cards: any[]\n}\n\nclass Container extends React.Component{\n    state = {\n        cards: [\n            {\n                id: 1,\n                text: 'Write a cool JS library',\n            },\n            {\n                id: 2,\n                text: 'Make it generic enough',\n            },\n            {\n                id: 3,\n                text: 'Write README',\n            },\n            {\n                id: 4,\n                text: 'Create some examples',\n            },\n            {\n                id: 5,\n                text: 'Spam in Twitter and IRC to promote it',\n            },\n            {\n                id: 6,\n                text: '???',\n            },\n            {\n                id: 7,\n                text: 'PROFIT',\n            },\n        ],\n    }\n\n    render() {\n        const { connectDropTarget } = this.props\n        const { cards } = this.state\n\n        return connectDropTarget(\n            <div style={style}>\n                {cards.map(card => (\n                    <Card\n                        key={card.id}\n                        id={`${card.id}`}\n                        text={card.text}\n                        moveCard={this.moveCard}\n                        findCard={this.findCard}\n                    />\n                ))}\n            </div>,\n        )\n    }\n\n    moveCard = (id: string, atIndex: number) => {\n        const { card, index } = this.findCard(id)\n        this.setState(\n            update(this.state, {\n                cards: {\n                    $splice: [[index, 1], [atIndex, 0, card]],\n                },\n            }),\n        )\n    }\n\n    findCard = (id: string) => {\n        const { cards } = this.state\n        const card = cards.filter(c => `${c.id}` === id)[0]\n\n        return {\n            card,\n            index: cards.indexOf(card),\n        }\n    }\n}\n\nexport default DropTarget(Types.ITEM, cardTarget, connect => ({\n    connectDropTarget: connect.dropTarget(),\n}))(Container)\n\n\n// import React, { Component } from 'react';\n// import { connect } from 'react-redux';\n// import styles from './List.module.css';\n// import Card from '../../components/Card/Card';\n// import InputCard from '../InputCard/InputCard';\n// import * as listActions from '../../store/actions/lists';\n\n// class List extends Component {\n\n//     moveCard = (oldId, newId) => {\n//         const card = this.props.cards[oldId]\n//         console.log(\"in here\")\n//         this.props.onCardMovedInList(this.props.listName, card, oldId, newId);\n//     }\n\n\n//     render(){\n//         const displayCards = this.props.cards.map((cardName, index)=> {\n//             return (\n//                 <Card key={cardName+index}\n//                         id ={index}\n//                         cardName={cardName} \n//                         currentList={this.props.listName}\n//                         moveCard={this.moveCard}/>\n//             )\n//         })\n//         return(\n//             <div className={styles.List}>\n//                 <h4>{this.props.listName}</h4>\n//                 {displayCards}\n//                 <InputCard createNewCard={this.props.onCardAdded} \n//                             cards={this.props.cards} \n//                             list={this.props.listName}/>\n//             </div>\n//         );\n//     }\n// }\n\n// const mapDispatchToProps= dispatch => {\n//     return {\n//         onCardAdded: (cardName, listName) => dispatch(listActions.addCard(cardName, listName)),\n//         onCardMovedInList: (listName, cardName, currentIndex, newIndex) => dispatch(listActions.moveCardInList(listName, cardName, currentIndex, newIndex))\n//         // onCardMovedBetweenLists: (cardName, currentList, droppedList) => dispatch(listActions.moveCard(cardName, currentList, droppedList)),\n//     }\n// }\n\n// export default connect(null, mapDispatchToProps)(List);"]},"metadata":{},"sourceType":"module"}