{"version":3,"sources":["components/Topbar/Topbar.module.css","containers/Board/Board.module.css","components/BoardTitle/BoardTitle.module.css","containers/Lists/Lists.module.css","containers/List/List.module.css","containers/InputCard/InputCard.module.css","containers/InputList/InputList.module.css","components/Topbar/Topbar.js","components/BoardTitle/BoardTitle.js","components/Card/Card.js","containers/InputCard/InputCard.js","containers/List/List.js","store/actions/lists.js","store/actions/actionTypes.js","containers/InputList/InputList.js","containers/Lists/Lists.js","containers/Board/Board.js","App.js","serviceWorker.js","store/reducers/lists.js","index.js","components/Card/Card.module.css"],"names":["module","exports","Topbar","DesktopOnly","Board","BoardTitle","Lists","List","InputCard","Buttons","FormAcceptButton","FormCancelButton","Cancel","InputCardButton","InputList","InputListButton","topbar","props","react_default","a","createElement","className","styles","boardTitle","Types","Card","height","_this","this","_this$props","text","isDragging","connectDragSource","connectDropTarget","CardDragging","myElement","clientHeight","isEmptyList","NoCardsPlaceholder","react","ref","input","style","React","DropTarget","canDrop","hover","monitor","draggedId","getItem","id","hoverId","hoverIndex","index","hoverListId","listId","_props$findCard2","findCard","card","draggedIndex","draggedListId","moveCard","connect","dropTarget","DragSource","beginDrag","originalIndex","originalListId","endDrag","_monitor$getItem","droppedId","didDrop","_props$findCard","dragSource","state","cardName","inputActive","handleChange","event","setState","target","value","handleSubmit","preventDefault","createNewCard","cards","inputActiveHandler","inputInactiveHandler","handleClickOutside","wrapperRef","contains","document","addEventListener","removeEventListener","inputRef","focus","_this2","formIsValid","length","listText","form","node","onSubmit","inputEl","type","onChange","placeholder","disabled","onClick","Clear_default","Component","Container","currentList","key","lists","currentCard","filter","c","concat","push","indexOf","displayCards","components_Card_Card","onCardMovedInList","map","listName","containers_InputCard_InputCard","onCardAdded","drop","dispatch","cardLength","listActions","newListId","currentIndex","newIndex","createNewList","Object","keys","displayLists","listKeys","name","containers_InputList_InputList","onListAdded","DragDropContext","HTML5Backend","listLength","containers_Lists_Lists","App","containers_Board_Board","Boolean","window","location","hostname","match","initialState","cardCounter","1","2","reducer","_objectSpread4","arguments","undefined","action","newList","objectSpread","defineProperty","newCard","toConsumableArray","originalList","originalListCards","newListy","newListCards","splice","store","createStore","listReducer","__REDUX_DEVTOOLS_EXTENSION__","app","es","src_App_0","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e254f4a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Topbar\":\"Topbar_Topbar__22Hhp\",\"DesktopOnly\":\"Topbar_DesktopOnly__2AfU4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__2dZB0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BoardTitle\":\"BoardTitle_BoardTitle__jGYQa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Lists\":\"Lists_Lists__2XWHD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"List_List__xoNiv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputCard\":\"InputCard_InputCard__2tRlx\",\"Buttons\":\"InputCard_Buttons__2bBg9\",\"FormAcceptButton\":\"InputCard_FormAcceptButton__GWtDZ\",\"FormCancelButton\":\"InputCard_FormCancelButton__1F_nA\",\"Cancel\":\"InputCard_Cancel__1DY4T\",\"InputCardButton\":\"InputCard_InputCardButton__3VExW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputList\":\"InputList_InputList__MCSBJ\",\"Buttons\":\"InputList_Buttons__yg6hW\",\"FormAcceptButton\":\"InputList_FormAcceptButton__KdJXD\",\"FormCancelButton\":\"InputList_FormCancelButton__Z6PLT\",\"Cancel\":\"InputList_Cancel__3WoYl\",\"InputListButton\":\"InputList_InputListButton__2DJDq\"};","import React from 'react';\nimport styles from './Topbar.module.css';\n\nconst topbar = (props) => (\n    <header className={styles.Topbar}>\n        Trello\n    </header>\n);\n\nexport default topbar;","import React from 'react';\nimport styles from './BoardTitle.module.css';\n\nconst boardTitle = (props) => (\n    <header className={styles.BoardTitle}>\n        Demo Board\n    </header>\n);\n\nexport default boardTitle;","import * as React from 'react'\nimport { DragSource, DropTarget} from 'react-dnd'\n\nimport styles from './Card.module.css';\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst cardSource = {\n    beginDrag(props) {\n        return {\n            id: props.id,\n            originalIndex: props.index,\n            originalListId: props.listId\n        }\n    },\n\n    endDrag(props, monitor) {\n        const { id: droppedId, originalIndex, originalListId} = monitor.getItem()\n        const didDrop = monitor.didDrop()\n\n        if (!didDrop) {\n            const { card, draggedIndex, draggedListId } = props.findCard(droppedId)\n            props.moveCard(draggedListId, originalListId, draggedIndex, originalIndex, card)\n        }\n    },\n}\n\nconst cardTarget = {\n    canDrop() {\n        return false\n    },\n\n    hover(props, monitor) {\n        const { id: draggedId} = monitor.getItem()\n        const { id: hoverId, index: hoverIndex, listId: hoverListId} = props\n\n        if (draggedId !== hoverId) {\n            const { card, draggedIndex, draggedListId } = props.findCard(draggedId)\n            props.moveCard(draggedListId, hoverListId, draggedIndex, hoverIndex, card)\n        }\n    },\n}\n\nconst collectDrop = (connect, monitor) => {\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nconst collectDrag = (connect, monitor) =>{\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nclass Card extends React.Component {\n    render() {\n        const { text, isDragging, connectDragSource, connectDropTarget} = this.props\n        let className = styles.Card\n        let height\n        if(isDragging){\n            className=styles.CardDragging\n            height = this.myElement.clientHeight\n        }\n\n        if(this.props.isEmptyList){\n            className=styles.NoCardsPlaceholder\n        }\n\n        return connectDragSource(\n            connectDropTarget(<div className={className} ref={input => { this.myElement = input; }} style={{height}}>{text}</div>),\n        )\n    }\n}\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(DragSource(Types.ITEM, cardSource, collectDrag)(Card))","import React, {Component} from 'react';\n\nimport styles from './InputCard.module.css';\nimport Clear from '@material-ui/icons/Clear';\n\nclass InputCard extends Component{\n    state={\n        cardName: \"\",\n        inputActive: false\n    }\n\n    handleChange = event => {\n        this.setState({cardName: event.target.value});\n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n        this.props.createNewCard(this.state.cardName, this.props.cards, this.props.listId);\n        this.setState({cardName: \"\"});\n    }\n\n    inputActiveHandler = () => {\n        this.setState({inputActive: true});\n    }\n\n    inputInactiveHandler = () => {\n        this.setState({inputActive: false});\n    }\n\n    handleClickOutside = (event) => {\n        if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n            this.setState({inputActive: false});\n        }\n    }\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentDidUpdate(){\n        if(this.state.inputActive){\n            this.inputRef.focus();\n        }\n    }\n\n    render (){\n        const formIsValid = this.state.cardName.length > 0\n        const listText = this.props.cards ? '+ Add another card' : '+ Add a card';\n        let form  = (\n                <div ref={node => { this.wrapperRef = node; }} className={styles.InputCard}>\n                    <form onSubmit={this.handleSubmit}>\n                        <textarea ref={inputEl => { this.inputRef = inputEl; }} type=\"text\" value={this.state.cardName} onChange={this.handleChange} placeholder=\"Enter card title...\"/>\n                        <div className={styles.Buttons}>\n                            <button className={styles.FormAcceptButton} disabled={!formIsValid}>Add Card</button>\n                            <button className={styles.FormCancelButton} type=\"button\" onClick={this.inputInactiveHandler}><Clear className={styles.Cancel}/></button>\n                        </div>\n                    </form>\n                </div>   \n        );\n\n        if(!this.state.inputActive){\n            form = (\n                <button className={styles.InputCardButton} onClick={this.inputActiveHandler}>{listText}</button>\n            );\n        }\n\n        return form;\n    }\n}\n\nexport default InputCard;","import * as React from 'react'\nimport { DropTarget } from 'react-dnd'\nimport Card from '../../components/Card/Card'\nimport InputCard from '../InputCard/InputCard';\nimport styles from './List.module.css';\n\nimport { connect } from 'react-redux';\nimport * as listActions from '../../store/actions/lists';\n\nconst Types = {\n    ITEM: 'card'\n}\n\nconst cardTarget = {\n    drop() {}\n}\n\nconst collectDrop = (connect, monitor) =>{\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}\n\nclass Container extends React.Component{\n    render() {\n        const { connectDropTarget } = this.props\n        const { cards } = this.props\n        let displayCards = <Card\n                    id={\"NOID\"}\n                    index={0}\n                    listId={this.props.listId}\n                    findCard={this.findCard}\n                    moveCard={this.props.onCardMovedInList}\n                    isEmptyList={true}\n                />;\n        if(cards.length !== 0){\n            displayCards = cards.map(card => {\n                return <Card\n                    key={card.id}\n                    id={`${card.id}`}\n                    text={card.text}\n                    index={cards.indexOf(card)}\n                    listId={this.props.listId}\n                    findCard={this.findCard}\n                    moveCard={this.props.onCardMovedInList}\n                    isEmptyList={false}\n                />;\n            })\n        }\n\n        return connectDropTarget(\n            <div className={styles.List}>\n                <h4>{this.props.listName}</h4>\n                {displayCards}\n                <InputCard createNewCard={this.props.onCardAdded} \n                    cards={this.props.cards} \n                    listId={this.props.listId}/>\n            </div>\n        )\n    }\n\n    findCard = (id) => {\n        let card = []\n        let currentList\n        for (var key in this.props.lists){\n            const currentCard = (this.props.lists[key].cards.filter(c => `${c.id}` === id)[0])\n            if (currentCard){\n                card.push(currentCard)\n                currentList = key\n            }\n        }\n        return {\n            card: card[0],\n            draggedIndex: this.props.lists[currentList].cards.indexOf(card[0]),\n            draggedListId: currentList\n        }\n    }\n}\n\nconst mapDispatchToProps= dispatch => {\n    return {\n        onCardAdded: (cardName, cards, listId) => dispatch(listActions.addCard(cardName, cards, listId)),\n        onCardMovedInList: (originalListId, newListId, currentIndex, newIndex, card) => dispatch(listActions.moveCardInList(originalListId, newListId, currentIndex, newIndex, card))\n    }\n}\n\nexport default DropTarget(Types.ITEM, cardTarget, collectDrop)(connect(null, mapDispatchToProps)(Container))","import * as actionTypes from './actionTypes';\n\nexport const addList = (name, lists) =>{\n    return {\n        type: actionTypes.ADD_LIST,\n        listName: name,\n        listLength: Object.keys(lists).length +1\n    };\n};\n\nexport const addCard = (cardName, cards, listId) =>{\n    return {\n        type: actionTypes.ADD_CARD,\n        cardName: cardName,\n        cardLength: cards.length,\n        listId: listId\n    };\n};\n\nexport const moveCardInList = (originalListId, newListId, currentIndex, newIndex, card) => {\n    return {\n        type: actionTypes.MOVE_CARD,\n        originalListId: originalListId,\n        newListId: newListId,\n        currentIndex: currentIndex,\n        newIndex: newIndex,\n        card: card\n    };\n};","export const ADD_LIST = \"ADD_LIST\";\nexport const ADD_CARD = \"ADD_CARD\";\nexport const MOVE_CARD = \"MOVE_CARD\";","import React, {Component} from 'react';\n\nimport styles from './InputList.module.css';\nimport Clear from '@material-ui/icons/Clear';\n\nclass InputList extends Component{\n    state={\n        listName: \"\",\n        inputActive: false\n    }\n\n    handleChange = event => {\n        this.setState({listName: event.target.value});\n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n        this.props.createNewList(this.state.listName, this.props.lists);\n        this.setState({listName: \"\"});\n    }\n\n    inputActiveHandler = () => {\n        this.setState({inputActive: true});\n    }\n\n    inputInactiveHandler = () => {\n        this.setState({inputActive: false});\n    }\n\n    handleClickOutside = (event) => {\n        if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n            this.setState({inputActive: false});\n        }\n    }\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n    \n    componentDidUpdate(){\n        if(this.state.inputActive){\n            this.inputRef.focus();\n        }\n    }\n\n    render (){\n        const formIsValid = this.state.listName.length > 0\n        const listText = Object.keys(this.props.lists).length> 0 ? '+ Add another list' : '+ Add a list';\n        let form  = (\n                    <div ref={node => { this.wrapperRef = node; }} className={styles.InputList}>\n                        <form onSubmit={this.handleSubmit}>\n                            <input ref={inputEl => { this.inputRef = inputEl; }} type=\"text\" value={this.state.listName} onChange={this.handleChange} placeholder=\"Enter list title...\"/>\n                            <div className={styles.Buttons}>\n                                <button className={styles.FormAcceptButton} disabled={!formIsValid}>Add List</button>\n                                <button className={styles.FormCancelButton} type=\"button\" onClick={this.inputInactiveHandler}><Clear className={styles.Cancel}/></button>\n                            </div>\n                        </form>\n                    </div>\n            );\n\n        if(!this.state.inputActive){\n            form = (\n                <button className={styles.InputListButton} onClick={this.inputActiveHandler}>{listText}</button>\n            );\n        }\n        return form;\n    }\n}\n\nexport default InputList;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styles from './Lists.module.css';\nimport List from '../List/List';\nimport InputList from '../InputList/InputList';\nimport * as listActions from '../../store/actions/lists';\n\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { DragDropContext } from 'react-dnd';\n\nclass Lists extends Component {\n\n    render(){\n        const displayLists = Object.keys(this.props.lists).map( listKeys => {\n                return <List \n                    key={listKeys}\n                    listId={listKeys} \n                    listName={this.props.lists[listKeys].name} \n                    cards={this.props.lists[listKeys].cards}\n                    lists={this.props.lists}/>;\n            })\n\n        return(\n            <div className={styles.Lists}>\n                {displayLists}\n                <InputList createNewList={this.props.onListAdded} lists={this.props.lists}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        lists: state.lists\n    };\n}\nconst mapDispatchToProps= dispatch => {\n    return {\n        onListAdded: (listName, lists) => dispatch(listActions.addList(listName, lists))\n    }\n}\n\nexport default DragDropContext(HTML5Backend)(connect(mapStateToProps, mapDispatchToProps)(Lists));","import React, { Component } from 'react';\nimport styles from './Board.module.css';\nimport BoardTitle from '../../components/BoardTitle/BoardTitle';\nimport Lists from '../Lists/Lists';\n\nclass Board extends Component {\n    render(){\n        return(\n        <div className={styles.Board}>\n            <BoardTitle/>\n            <Lists/>\n        </div>\n        );\n    }\n}\n\nexport default Board;","import React, { Component } from 'react';\nimport './App.css';\nimport Topbar from './components/Topbar/Topbar';\nimport Board from './containers/Board/Board';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Topbar />\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    cardCounter: 8,\n    lists: {\n        1:{\n            name: \"Game One\",\n            cards: [\n                {\n                    id: \"L1C1\",\n                    text: 'Come up with a great game idea',\n                },\n                {\n                    id: \"L1C2\",\n                    text: 'Write a solid spec outlining the idea',\n                },\n                {\n                    id: \"L1C3\",\n                    text: 'Build and MVP Prototype',\n                },\n                {\n                    id: \"L1C4\",\n                    text: 'Iterate on the prototype until fun',\n                },\n                {\n                    id: \"L1C5\",\n                    text: 'Launch and gather player data',\n                },\n                {\n                    id: \"L1C6\",\n                    text: 'Iterate based on player data',\n                },\n                {\n                    id: \"L1C7\",\n                    text: 'PROFIT',\n                }\n            ]\n        },\n        2:{\n            name: \"Game Two\",\n            cards: [\n                {\n                    id: \"L2C8\",\n                    text: 'Do it all again',\n                }\n            ]\n        }\n    }\n};\n\nconst reducer = (state=initialState, action) =>{\n    switch(action.type){\n        case actionTypes.ADD_LIST:\n            const newList = {name: action.listName, cards:[]};\n            return{\n                ...state,\n                lists: {\n                    ...state.lists,\n                    [action.listLength]: newList\n                }\n            };\n        case actionTypes.ADD_CARD:\n            const newCard = {id: `L${action.listId}C${state.cardCounter+1}`, text: action.cardName}\n            return{\n                ...state,\n                cardCounter: state.cardCounter+1,\n                lists: {\n                    ...state.lists,\n                   [action.listId]: {\n                        ...state.lists[action.listId],\n                        cards:[\n                            ...state.lists[action.listId].cards,\n                            newCard\n                        ]\n                    }\n                }\n            };\n        case actionTypes.MOVE_CARD:\n            const originalList = {...state.lists[action.originalListId]}\n            const originalListCards = [...originalList.cards]\n            const newListy = {...state.lists[action.newListId]}\n            let newListCards = [...newListy.cards]\n            originalListCards.splice(action.currentIndex, 1)\n            if(action.originalListId === action.newListId){\n                originalListCards.splice(action.newIndex, 0, action.card)\n                newListCards = originalListCards\n            }\n            else{\n                newListCards.splice(action.newIndex, 0, action.card)\n            }\n            return{\n                ...state,\n                lists: {\n                    ...state.lists,\n                    [action.originalListId]:{\n                        ...state.lists[action.originalListId],\n                        cards: originalListCards\n                    },\n                    [action.newListId]:{\n                        ...state.lists[action.newListId],\n                        cards: newListCards\n                    }\n                }\n            };\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport listReducer from './store/reducers/lists';\n\nconst store = createStore(\n    listReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nconst app = (\n    <Provider store={store}>\n            <App />\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__2a_e7\",\"CardDragging\":\"Card_CardDragging__wSZPd\",\"NoCardsPlaceholder\":\"Card_NoCardsPlaceholder__3v5hn\"};"],"sourceRoot":""}